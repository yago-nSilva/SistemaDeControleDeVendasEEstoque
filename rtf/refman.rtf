{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment ProjetoControledeEstoqueEVendas  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}ProjetoControledeEstoqueEVendas}
{\comment Gerado por doxygen 1.9.7.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt ProjetoControledeEstoqueEVendas}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o 1.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice Hier\'E1rquico\par \pard\plain 
{\tc \v \'CDndice Hier\'E1rquico}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Hierarquia de Classes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta lista de hierarquias est\'E1 parcialmente ordenada (ordem alfab\'E9tica):}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Cadastro\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FileAux\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
LoginFile\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
UserFile\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
Product\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Produto\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Verificador\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Componentes\par \pard\plain 
{\tc \v \'CDndice dos Componentes}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Classes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Aqui est\'E3o as classes, estruturas, uni\'F5es e interfaces e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Cadastro} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FileAux} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b LoginFile} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Product} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Produto} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UserFile} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Verificador} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Arquivos\par \pard\plain 
{\tc \v \'CDndice dos Arquivos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Arquivos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta \'E9 a lista de todos os arquivos e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b ArquivosDeCodigo/{\b empresa.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b empresa_.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b produto.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b produto.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b removerProduto.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b removerProduto.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b vendas.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b vendas.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b Verificador.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ArquivosDeCodigo/{\b Verificador.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Classes{\tc \v Classes}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Cadastro\par \pard\plain 
{\tc\tcl2 \v Cadastro}
{\xe \v Cadastro}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\par
{
{\f2 #include <empresa.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b showPasswords} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b showUsernames} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertUsername} (std::string username)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertPassword} (std::string password)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b deleteUsername} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b deletePassword} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b confirmPassword} (std::string confirmation_password)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v confirmPassword\:Cadastro}
{\xe \v Cadastro\:confirmPassword}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Cadastro::confirmPassword (std::string  {\i confirmation_password})}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 28                                                              \{\par
29   {\cf19 if} (confirmation_password == Password.back()) {\cf19 return} {\cf17 true};\par
30   {\cf19 return} {\cf17 false};\par
31 \}\par
}
}
{\xe \v deletePassword\:Cadastro}
{\xe \v Cadastro\:deletePassword}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cadastro::deletePassword ()}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 39                              \{\par
40   Password.erase(Password.end() - 1);\par
41 \}\par
}
}
{\xe \v deleteUsername\:Cadastro}
{\xe \v Cadastro\:deleteUsername}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cadastro::deleteUsername ()}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 34                              \{\par
35   Username.erase(Username.end() - 1);\par
36 \}\par
}
}
{\xe \v insertPassword\:Cadastro}
{\xe \v Cadastro\:insertPassword}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cadastro::insertPassword (std::string  {\i password})}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 23                                                \{\par
24     Password.push_back(password);\par
25 \}\par
}
}
{\xe \v insertUsername\:Cadastro}
{\xe \v Cadastro\:insertUsername}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cadastro::insertUsername (std::string  {\i username})}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 18                                                \{\par
19     Username.push_back(username);\par
20 \}\par
}
}
{\xe \v showPasswords\:Cadastro}
{\xe \v Cadastro\:showPasswords}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cadastro::showPasswords ()}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4                             \{\par
5   {\cf19 for} ({\cf18 unsigned} {\cf18 int} i = 0; i < Password.size(); i++)\{\par
6     std::cout << Password.at(i) << std::endl;\par
7   \} \par
8 \}\par
}
}
{\xe \v showUsernames\:Cadastro}
{\xe \v Cadastro\:showUsernames}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cadastro::showUsernames ()}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11                             \{\par
12   {\cf19 for} ({\cf18 unsigned} {\cf18 int} i = 0; i < Username.size(); i++)\{\par
13     std::cout << Username.at(i) << std::endl;\par
14   \}  \par
15 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa_.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe FileAux\par \pard\plain 
{\tc\tcl2 \v FileAux}
{\xe \v FileAux}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
\par
{
{\f2 #include <empresa.hpp>}}\par
Diagrama de hierarquia da classe FileAux:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_file_aux.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b turnintoNamefile} (std::string *pointerto_namefile, std::string namefile)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b createFile} (std::string const namefile)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b writeonFile} (std::string username, std::string password)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b verifyFile} (std::string *search_username_ptr, std::string &search_username)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b searchonFile} (std::string username, std::string password)=0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b marker_} = "-------------------"\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v createFile\:FileAux}
{\xe \v FileAux\:createFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FileAux::createFile (std::string const  {\i namefile}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b LoginFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b UserFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v searchonFile\:FileAux}
{\xe \v FileAux\:searchonFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FileAux::searchonFile (std::string  {\i username}, std::string  {\i password}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b LoginFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b UserFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v turnintoNamefile\:FileAux}
{\xe \v FileAux\:turnintoNamefile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FileAux::turnintoNamefile (std::string *  {\i pointerto_namefile}, std::string  {\i namefile})}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 44                                                                            \{\par
45   std::string namefile = name + {\cf22 ".txt"};\par
46   *pointerto_namefile = name + {\cf22 ".txt"};\par
47 \}\par
}
}
{\xe \v verifyFile\:FileAux}
{\xe \v FileAux\:verifyFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void FileAux::verifyFile (std::string *  {\i search_username_ptr}, std::string &  {\i search_username}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b LoginFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v writeonFile\:FileAux}
{\xe \v FileAux\:writeonFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FileAux::writeonFile (std::string  {\i username}, std::string  {\i password}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b LoginFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v marker_\:FileAux}
{\xe \v FileAux\:marker_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string FileAux::marker_ = "-------------------"{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa_.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe LoginFile\par \pard\plain 
{\tc\tcl2 \v LoginFile}
{\xe \v LoginFile}
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
\par
{
{\f2 #include <empresa.hpp>}}\par
Diagrama de hierarquia da classe LoginFile:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_login_file.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isfileOpen} (std::string const namefile)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b createFile} (std::string const namefile) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b writeonFile} (std::string username, std::string password) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b verifyFile} (std::string *search_username_ptr, std::string &search_username) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b searchonFile} (std::string username, std::string password) override\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b FileAux}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b turnintoNamefile} (std::string *pointerto_namefile, std::string namefile)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b createFile} (std::string const namefile)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b writeonFile} (std::string username, std::string password)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b verifyFile} (std::string *search_username_ptr, std::string &search_username)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b searchonFile} (std::string username, std::string password)=0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::fstream {\b _file}\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos Protegidos herdados de {\b FileAux}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b marker_} = "-------------------"\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v createFile\:LoginFile}
{\xe \v LoginFile\:createFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool LoginFile::createFile (std::string const  {\i namefile}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b FileAux} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
Reimplementado por {\b UserFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 268                                                              \{\par
269   _file.open(namefile, std::ios::out);\par
270 \par
271   _file << {\cf22 "-- Dados de login --"}\par
272       << std::endl;\par
273 \par
274   _file << marker_;\par
275 \par
276   {\cf19 if}(!_file.is_open())\{\par
277     std::cout << {\cf22 "Erro ao abrir o arquivo"} {\cf20 //}\par
278             << std::endl;\par
279 \par
280     {\cf19 return} {\cf17 false};\par
281   \}\par
282 \par
283   std::cout << {\cf22 "Arquivo Aberto"} {\cf20 //}\par
284           << std::endl;\par
285 \par
286   _file.close();\par
287   {\cf19 return} {\cf17 true};\par
288   \}\par
}
}
{\xe \v isfileOpen\:LoginFile}
{\xe \v LoginFile\:isfileOpen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool LoginFile::isfileOpen (std::string const  {\i namefile})}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 50                                                   \{\par
51   std::fstream file(namefile);\par
52   {\cf19 return} file.is_open();\par
53 \}\par
}
}
{\xe \v searchonFile\:LoginFile}
{\xe \v LoginFile\:searchonFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool LoginFile::searchonFile (std::string  {\i username}, std::string  {\i password}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b FileAux} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
Reimplementado por {\b UserFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 347                                                                             \{\par
348         \par
349     std::string line;\par
350     std::string file_username = {\cf22 "User: "} + username + {\cf22 " // "};\par
351     \par
352     _file.open({\cf22 "login.txt"}, std::ios::in);\par
353     _file.seekg(0, std::ios::beg);\par
354 \par
355     {\cf19 while}(getline(_file, line))\{\par
356         {\cf19 if} (file_username == line)\{\par
357 \par
358           _file.seekg(0, std::ios::beg);\par
359           _file.close();\par
360 \par
361             {\cf19 return} {\cf17 true};\par
362         \}\par
363     \}\par
364 \par
365     _file.seekg(0, std::ios::beg);\par
366     _file.close();\par
367 \par
368     std::cout << {\cf22 "-- Nome de usuario nao encontrado --"} \par
369             << std::endl;\par
370 \par
371     {\cf19 return} {\cf17 false};\par
372         \par
373   \}\par
}
}
{\xe \v verifyFile\:LoginFile}
{\xe \v LoginFile\:verifyFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void LoginFile::verifyFile (std::string *  {\i search_username_ptr}, std::string &  {\i search_username}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b FileAux} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 318                                                                                               \{\par
319     \par
320     _file.open({\cf22 "login.txt"}, std::ios::in);\par
321 \par
322     std::string line;\par
323     std::string username_string = {\cf22 "User: "} + *search_username_ptr + {\cf22 " // "};\par
324   \par
325     {\cf19 while} (getline(_file, line))\{\par
326 \par
327       {\cf19 if} (line == username_string)\{\par
328         {\cf19 while} (line == username_string)\{\par
329           *search_username_ptr = {\cf22 ""};   {\cf20 // Ressetar o search_username;}\par
330           std::cout << {\cf22 "-- Nome de usuario ja cadastrado --"}\par
331                   << std::endl;\par
332           std::cout << {\cf22 "Digite outro nome de usuario: "};\par
333           \par
334           std::cin >> search_username;\par
335 \par
336           username_string = {\cf22 "User: "} + *search_username_ptr + {\cf22 " // "};\par
337 \par
338         \}\par
339 \par
340         _file.seekg(0, std::ios::beg);\par
341       \}\par
342     \}\par
343 \par
344     _file.close();\par
345   \}\par
}
}
{\xe \v writeonFile\:LoginFile}
{\xe \v LoginFile\:writeonFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool LoginFile::writeonFile (std::string  {\i username}, std::string  {\i password}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b FileAux} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAACA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 290                                                                            \{\par
291 \par
292     _file.open({\cf22 "login.txt"}, std::ios::in);\par
293 \par
294     std::string search_word;\par
295     std::string line;\par
296     \par
297     {\cf19 do} \{\par
298       \par
299       {\cf19 if} (_file.eof())\{\par
300         _file.close();\par
301 \par
302         _file.open({\cf22 "login.txt"}, std::ios::app);\par
303 \par
304         _file << std::endl;\par
305         _file << {\cf22 "User: "} << username \par
306               << {\cf22 " // "} << std::endl\par
307               <<{\cf22 "Senha: "} << password \par
308               << std::endl << marker_;\par
309       \}\par
310     \} {\cf19 while} (getline(_file, line));\par
311     \par
312 \par
313     _file.close();\par
314 \par
315     {\cf19 return} {\cf17 true};\par
316   \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v _file\:LoginFile}
{\xe \v LoginFile\:_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::fstream LoginFile::_file{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa_.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura Product\par \pard\plain 
{\tc\tcl2 \v Product}
{\xe \v Product}
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
\par
{
{\f2 #include <vendas.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b category}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b quantity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b code}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b price}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v category\:Product}
{\xe \v Product\:category}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Product::category}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v code\:Product}
{\xe \v Product\:code}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Product::code}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v name\:Product}
{\xe \v Product\:name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Product::name}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v price\:Product}
{\xe \v Product\:price}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Product::price}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v quantity\:Product}
{\xe \v Product\:quantity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Product::quantity}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b vendas.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Produto\par \pard\plain 
{\tc\tcl2 \v Produto}
{\xe \v Produto}
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
\par
{
{\f2 #include <produto.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Produto} (const std::string &nome, const std::string &codigo, const std::string &categoria, double preco, const std::string &unidade, int quantidade)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getNome} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getCodigo} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getCategoria} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getPreco} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getUnidade} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getQuantidade} () const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Produto\:Produto}
{\xe \v Produto\:Produto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Produto::Produto (const std::string &  {\i nome}, const std::string &  {\i codigo}, const std::string &  {\i categoria}, double  {\i preco}, const std::string &  {\i unidade}, int  {\i quantidade})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6     : _nome(nome), _codigo(codigo), _categoria(categoria), _preco(preco), _unidade(unidade), _quantidade(quantidade) \{\par
7     {\cf20 // ...}\par
8 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v getCategoria\:Produto}
{\xe \v Produto\:getCategoria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Produto::getCategoria () const}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 18                                       \{\par
19     {\cf19 return} _categoria;\par
20 \}\par
}
}
{\xe \v getCodigo\:Produto}
{\xe \v Produto\:getCodigo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Produto::getCodigo () const}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 14                                    \{\par
15     {\cf19 return} _codigo;\par
16 \}\par
}
}
{\xe \v getNome\:Produto}
{\xe \v Produto\:getNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Produto::getNome () const}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10                                  \{\par
11     {\cf19 return} _nome;\par
12 \}\par
}
}
{\xe \v getPreco\:Produto}
{\xe \v Produto\:getPreco}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Produto::getPreco () const}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 22                                \{\par
23     {\cf19 return} _preco;\par
24 \}\par
}
}
{\xe \v getQuantidade\:Produto}
{\xe \v Produto\:getQuantidade}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Produto::getQuantidade () const}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 30                                  \{\par
31     {\cf19 return} _quantidade;\par
32 \}\par
}
}
{\xe \v getUnidade\:Produto}
{\xe \v Produto\:getUnidade}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Produto::getUnidade () const}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 26                                     \{\par
27     {\cf19 return} _unidade;\par
28 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b produto.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b produto.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe UserFile\par \pard\plain 
{\tc\tcl2 \v UserFile}
{\xe \v UserFile}
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
\par
{
{\f2 #include <empresa.hpp>}}\par
Diagrama de hierarquia da classe UserFile:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_user_file.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b doesuserfileExists} (std::string const namefile)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b createFile} (std::string const namefile) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b searchonFile} (std::string username, std::string password) override\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b LoginFile}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isfileOpen} (std::string const namefile)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b createFile} (std::string const namefile) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b writeonFile} (std::string username, std::string password) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b verifyFile} (std::string *search_username_ptr, std::string &search_username) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b searchonFile} (std::string username, std::string password) override\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b FileAux}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b turnintoNamefile} (std::string *pointerto_namefile, std::string namefile)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b createFile} (std::string const namefile)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b writeonFile} (std::string username, std::string password)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b verifyFile} (std::string *search_username_ptr, std::string &search_username)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b searchonFile} (std::string username, std::string password)=0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos Protegidos herdados de {\b LoginFile}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::fstream {\b _file}\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos Protegidos herdados de {\b FileAux}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b marker_} = "-------------------"\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v createFile\:UserFile}
{\xe \v UserFile\:createFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool UserFile::createFile (std::string const  {\i namefile}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b LoginFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 387                                                              \{\par
388 \par
389     std::string username = namefile;\par
390     username.erase(username.length() - 4 );\par
391 \par
392     _userfile.open(namefile, std::ios::app);\par
393 \par
394     _userfile << {\cf22 "User: "} << username;\par
395     _userfile << std::endl;\par
396 \par
397     _userfile.close();\par
398 \par
399     {\cf19 return} {\cf17 true};\par
400   \}\par
}
}
{\xe \v doesuserfileExists\:UserFile}
{\xe \v UserFile\:doesuserfileExists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool UserFile::doesuserfileExists (std::string const  {\i namefile})}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 56                                                          \{\par
57   std::fstream file(namefile);\par
58   {\cf19 return} file.is_open();\par
59 \}\par
}
}
{\xe \v searchonFile\:UserFile}
{\xe \v UserFile\:searchonFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool UserFile::searchonFile (std::string  {\i username}, std::string  {\i password}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b LoginFile} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 403                                                                             \{\par
404     \par
405     std::string user_on_file = {\cf22 "User: "} + username + {\cf22 " // "};\par
406     std::string password_on_file = {\cf22 "Senha: "} + password;\par
407     \par
408     std::string line;\par
409     _file.open({\cf22 "login.txt"}, std::ios::in);\par
410 \par
411     {\cf19 while}(getline(_file, line))\{\par
412 \par
413       {\cf19 if} (line == user_on_file)\{\par
414         {\cf19 if} (getline(_file, line))\{\par
415           {\cf19 if} (line == password_on_file)\{\par
416             std::cout << {\cf22 "Senha Correta!"}\par
417                 << std::endl;\par
418             std::cout << {\cf22 "-- Logando --"}\par
419                 << std::endl;\par
420 \par
421             _file.seekg(0, std::ios::beg);\par
422             _file.close();\par
423 \par
424             {\cf19 return} {\cf17 true};\par
425           \}\par
426         \}\par
427       \}\par
428     \}\par
429 \par
430     std::cout << {\cf22 "Senha incorreta!"}\par
431             << std::endl;\par
432 \par
433     _file.seekg(0, std::ios::beg);\par
434     _file.close();\par
435     \par
436     {\cf19 return} {\cf17 false};\par
437 \par
438   \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b empresa_.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Verificador\par \pard\plain 
{\tc\tcl2 \v Verificador}
{\xe \v Verificador}
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
\par
{
{\f2 #include <Verificador.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Verificador} (const std::string &arquivo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Verificador} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b verificar} (const std::string &palavra)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b linhaEncontrada} (const std::string &palavra)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b proxLinha} (const std::string &palavra)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Verificador\:Verificador}
{\xe \v Verificador\:Verificador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Verificador::Verificador (const std::string &  {\i arquivo})}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2                                                  : _nomeArquivo(arquivo) \{\par
3   abrirArquivo();\par
4   {\cf20 // Abre o arquivo para leitura}\par
5 \}\par
}
}
{\xe \v ~Verificador\:Verificador}
{\xe \v Verificador\:~Verificador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Verificador::~Verificador ()}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 8                           \{\par
9   fecharArquivo();\par
10   {\cf20 // Fecha o arquivo}\par
11 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v linhaEncontrada\:Verificador}
{\xe \v Verificador\:linhaEncontrada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Verificador::linhaEncontrada (const std::string &  {\i palavra})}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 38                                                                \{\par
39   std::string linha; \par
40   {\cf18 bool} encontrada = {\cf17 false};\par
41 \par
42   {\cf19 while}(std::getline(_arquivo, linha))\{\par
43     {\cf20 // L\'EA cada linha do arquivo}\par
44     {\cf18 size_t} pos = linha.find(palavra);\par
45     {\cf20 // Procura a posi\'E7\'E3o da palavra na linha}\par
46     {\cf19 if} (pos != std::string::npos) \{\par
47       {\cf20 // Se encontrou a palavra, marca como encontrada e interrompe o loop}\par
48       encontrada = {\cf17 true};\par
49       {\cf19 break};\par
50     \}\par
51   \}\par
52   \par
53   _arquivo.clear();\par
54   _arquivo.seekg(0);\par
55   {\cf20 // Retorna ao in\'EDcio do arquivo}\par
56 \par
57   {\cf19 if} (encontrada) \{\par
58     {\cf20 // Se a palavra foi encontrada, retorna a linha}\par
59     {\cf19 return} linha;\par
60   \} {\cf19 else} \{\par
61     {\cf20 // Se a palavra n\'E3o foi encontrada, retorna uma mensagem de erro}\par
62     {\cf19 return} {\cf22 "Palavra nao encontrada."};\par
63   \}\par
64 \}\par
}
}
{\xe \v proxLinha\:Verificador}
{\xe \v Verificador\:proxLinha}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Verificador::proxLinha (const std::string &  {\i palavra})}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 67                                                          \{\par
68   std::string linha;\par
69   {\cf18 bool} encontrada = {\cf17 false};\par
70   {\cf18 bool} proxLinha = {\cf17 false};\par
71 \par
72   {\cf19 while}(std::getline(_arquivo, linha))\{\par
73     {\cf20 // L\'EA cada linha do arquivo}\par
74     {\cf18 size_t} pos = linha.find(palavra);\par
75     {\cf20 // Procura a posi\'E7\'E3o da palavra na linha}\par
76     {\cf19 if} (pos != std::string::npos) \{\par
77       {\cf20 // Se encontrou a palavra, marca como encontrada e marca para pegar a pr\'F3xima linha}\par
78       encontrada = {\cf17 true};\par
79       proxLinha = {\cf17 true};\par
80       {\cf19 break};\par
81     \}\par
82   \}\par
83   \par
84   {\cf19 while}(std::getline(_arquivo, linha))\{\par
85     {\cf20 // L\'EA cada linha do arquivo ap\'F3s a linha encontrada}\par
86     {\cf19 if}(encontrada && proxLinha) \{\par
87       {\cf20 // Se j\'E1 encontrou a linha e est\'E1 na pr\'F3xima linha, interrompe o loop}\par
88       {\cf19 break};\par
89     \}\par
90   \}\par
91 \par
92   _arquivo.clear();\par
93   _arquivo.seekg(0);\par
94   {\cf20 // Retorna ao in\'EDcio do arquivo}\par
95 \par
96   {\cf19 if}(encontrada && proxLinha) \{\par
97     {\cf20 // Se a linha foi encontrada e a pr\'F3xima linha foi encontrada, retorna a pr\'F3xima linha}\par
98     {\cf19 return} linha; \par
99   \} {\cf19 else} \{\par
100     {\cf20 // Se a linha n\'E3o foi encontrada ou a pr\'F3xima linha n\'E3o foi encontrada, retorna uma mensagem de erro}\par
101     {\cf19 return} {\cf22 "Linha nao encontrada."};\par
102   \}\par
103 \}\par
}
}
{\xe \v verificar\:Verificador}
{\xe \v Verificador\:verificar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Verificador::verificar (const std::string &  {\i palavra})}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 14                                                    \{\par
15   std::string linha; \par
16   {\cf18 bool} encontrada = {\cf17 false};\par
17 \par
18   {\cf19 while}(std::getline(_arquivo, linha))\{\par
19     {\cf20 // L\'EA cada linha do arquivo}\par
20     {\cf18 size_t} pos = linha.find(palavra);\par
21     {\cf20 // Procura a posi\'E7\'E3o da palavra na linha}\par
22     {\cf19 if} (pos != std::string::npos) \{\par
23       {\cf20 // Se encontrou a palavra, marca como encontrada e interrompe o loop}\par
24       encontrada = {\cf17 true};\par
25       {\cf19 break};\par
26     \}\par
27   \}\par
28 \par
29   _arquivo.clear();\par
30   _arquivo.seekg(0);\par
31   {\cf20 // Retorna ao in\'EDcio do arquivo}\par
32 \par
33   {\cf19 return} encontrada;\par
34   {\cf20 // Retorna se a palavra foi encontrada ou n\'E3o}\par
35 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b Verificador.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ArquivosDeCodigo/{\b Verificador.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Arquivos{\tc \v Arquivos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/empresa.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/empresa.hpp}
{\xe \v ArquivosDeCodigo/empresa.hpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <string>}\par
{\f2 #include <fstream>}\par
{\f2 #include "empresa_.cpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Cadastro}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FileAux}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b LoginFile}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b UserFile}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
empresa.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/empresa.hpp}
{\xe \v ArquivosDeCodigo/empresa.hpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef EMPRESA_H}\par
2 {\cf21 #define EMPRESA_H}\par
3 \par
4 {\cf21 #include <iostream>}\par
5 {\cf21 #include <vector>}\par
6 {\cf21 #include <string>}\par
7 {\cf21 #include <fstream>}\par
8 \par
9 {\cf17 class }Cadastro\par
10 \{\par
11 {\cf17 public}:\par
12 \par
13   {\cf18 void} showPasswords();\par
14   {\cf18 void} showUsernames();\par
15 \par
16   {\cf18 void} insertUsername(std::string username);\par
17   {\cf18 void} insertPassword(std::string password);\par
18 \par
19   {\cf18 void} deleteUsername(); {\cf20 // Deleta o \'FAltimo nome de usu\'E1rio cadastrado}\par
20   {\cf18 void} deletePassword(); {\cf20 // Deleta a \'FAltima senha cadastrada}\par
21 \par
22   {\cf18 bool} confirmPassword(std::string confirmation_password);    \par
23 \par
24 {\cf17 private}:\par
25 \par
26   std::vector<std::string> Username;\par
27   std::vector<std::string> Password;\par
28 \};\par
29 \par
30 {\cf21 #ifndef EMPRESA_H}\par
31 {\cf21 #define EMPRESA_H}\par
32 \par
33 {\cf21 #include <iostream>}\par
34 {\cf21 #include <vector>}\par
35 {\cf21 #include <string>}\par
36 {\cf21 #include <fstream>}\par
37 \par
38 {\cf17 class }Cadastro\par
39 \{\par
40 {\cf17 public}:\par
41   {\cf20 // Fun\'E7\'F5es para exibir nomes de usu\'E1rio e senhas}\par
42   {\cf18 void} showPasswords();\par
43   {\cf18 void} showUsernames();\par
44 \par
45   {\cf20 // Fun\'E7\'F5es para inserir nomes de usu\'E1rio e senhas}\par
46   {\cf18 void} insertUsername(std::string username);\par
47   {\cf18 void} insertPassword(std::string password);\par
48 \par
49   {\cf20 // Fun\'E7\'F5es para excluir o \'FAltimo nome de usu\'E1rio e senha cadastrados}\par
50   {\cf18 void} deleteUsername();\par
51   {\cf18 void} deletePassword();\par
52 \par
53   {\cf20 // Fun\'E7\'E3o para confirmar uma senha}\par
54   {\cf18 bool} confirmPassword(std::string confirmation_password);\par
55 \par
56 {\cf17 private}:\par
57   {\cf20 // Vetores para armazenar os nomes de usu\'E1rio e senhas}\par
58   std::vector<std::string> Username;\par
59   std::vector<std::string> Password;\par
60 \};\par
61 \par
62 {\cf17 class }FileAux\par
63 \{\par
64 {\cf17 public}:\par
65   {\cf20 // Fun\'E7\'E3o para transformar o nome do arquivo}\par
66   {\cf18 void} turnintoNamefile(std::string *pointerto_namefile, std::string namefile);\par
67 \par
68   {\cf20 // Fun\'E7\'F5es virtuais puras relacionadas \'E0 manipula\'E7\'E3o de arquivos}\par
69   {\cf17 virtual} {\cf18 bool} createFile(std::string {\cf17 const} namefile) = 0;\par
70   {\cf17 virtual} {\cf18 bool} writeonFile(std::string username, std::string password) = 0;\par
71   {\cf17 virtual} {\cf18 void} verifyFile(std::string* search_username_ptr, std::string &search_username) = 0;\par
72   {\cf17 virtual} {\cf18 bool} searchonFile(std::string username, std::string password) = 0;\par
73 \par
74 {\cf17 protected}:\par
75   {\cf20 // Marca utilizada no arquivo}\par
76   std::string marker_ = {\cf22 "-------------------"};\par
77 \};\par
78 \par
79 {\cf17 class }LoginFile : {\cf17 public} FileAux\par
80 \{\par
81 {\cf17 public}:\par
82   {\cf20 // Verifica se o arquivo est\'E1 aberto}\par
83   {\cf18 bool} isfileOpen(std::string {\cf17 const} namefile);\par
84 \par
85   {\cf20 // Implementa\'E7\'E3o da fun\'E7\'E3o para criar um arquivo de login}\par
86   {\cf17 virtual} {\cf18 bool} createFile (std::string {\cf17 const} namefile){\cf17  override }\{\par
87     _file.open(namefile, std::ios::out);\par
88 \par
89     _file << {\cf22 "-- Dados de login --"} << std::endl;\par
90     _file << marker_;\par
91 \par
92     {\cf19 if}(!_file.is_open())\{\par
93       std::cout << {\cf22 "Erro ao abrir o arquivo"} << std::endl;\par
94 \par
95       {\cf19 return} {\cf17 false};\par
96     \}\par
97 \par
98     std::cout << {\cf22 "Arquivo Aberto"} << std::endl;\par
99 \par
100     _file.close();\par
101     {\cf19 return} {\cf17 true};\par
102   \}\par
103 \par
104   {\cf20 // Implementa\'E7\'E3o da fun\'E7\'E3o para escrever em um arquivo de login}\par
105   {\cf17 virtual} {\cf18 bool} writeonFile(std::string username, std::string password){\cf17  override }\{\par
106     _file.open({\cf22 "login.txt"}, std::ios::in);\par
107 \par
108     std::string search_word;\par
109     std::string line;\par
110     \par
111     {\cf19 do} \{\par
112       {\cf19 if} (_file.eof())\{\par
113         _file.close();\par
114 \par
115         _file.open({\cf22 "login.txt"}, std::ios::app);\par
116 \par
117         _file << std::endl;\par
118         _file << {\cf22 "User: "} << username << {\cf22 " // "} << std::endl\par
119               << {\cf22 "Senha: "} << password << std::endl << marker_;\par
120       \}\par
121     \} {\cf19 while} (getline(_file, line));\par
122     \par
123     _file.close();\par
124 \par
125     {\cf19 return} {\cf17 true};\par
126   \}\par
127 \par
128   {\cf20 // Implementa\'E7\'E3o da fun\'E7\'E3o para verificar um arquivo de login}\par
129   {\cf17 virtual} {\cf18 void} verifyFile(std::string* search_username_ptr, std::string &search_username){\cf17  override }\{\par
130     _file.open({\cf22 "login.txt"}, std::ios::in);\par
131 \par
132     std::string line;\par
133     std::string username_string = {\cf22 "User: "} + *search_username_ptr + {\cf22 " // "};\par
134   \par
135     {\cf19 while} (getline(_file, line))\{\par
136       {\cf19 if} (line == username_string)\{\par
137         {\cf19 while} (line == username_string)\{\par
138           *search_username_ptr = {\cf22 ""};   {\cf20 // Resetar o search_username;}\par
139           std::cout << {\cf22 "-- Nome de usu\'E1rio j\'E1 cadastrado --"} << std::endl;\par
140           std::cout << {\cf22 "Digite outro nome de usu\'E1rio: "};\par
141           \par
142           std::cin >> search_username;\par
143 \par
144           username_string = {\cf22 "User: "} + *search_username_ptr + {\cf22 " // "};\par
145         \}\par
146 \par
147         _file.seekg(0, std::ios::beg);\par
148       \}\par
149     \}\par
150 \par
151     _file.close();\par
152   \}\par
153       \par
154   {\cf20 // Implementa\'E7\'E3o da fun\'E7\'E3o para pesquisar em um arquivo de login}\par
155   {\cf17 virtual} {\cf18 bool} searchonFile(std::string username, std::string password){\cf17  override }\{\par
156     std::string line;\par
157     std::string file_username = {\cf22 "User: "} + username + {\cf22 " // "};\par
158     \par
159     _file.open({\cf22 "login.txt"}, std::ios::in);\par
160     _file.seekg(0, std::ios::beg);\par
161 \par
162     {\cf19 while}(getline(_file, line))\{\par
163       {\cf19 if} (file_username == line)\{\par
164         _file.seekg(0, std::ios::beg);\par
165         _file.close();\par
166 \par
167         {\cf19 return} {\cf17 true};\par
168       \}\par
169     \}\par
170 \par
171     _file.seekg(0, std::ios::beg);\par
172     _file.close();\par
173 \par
174     std::cout << {\cf22 "-- Nome de usu\'E1rio n\'E3o encontrado --"} << std::endl;\par
175 \par
176     {\cf19 return} {\cf17 false};\par
177   \}\par
178 \par
179 {\cf17 protected}:\par
180   std::fstream _file;\par
181 \};\par
182 \par
183 {\cf17 class }UserFile : {\cf17 public} LoginFile\par
184 \{\par
185 {\cf17 public}:\par
186   {\cf20 // Verifica se o arquivo de usu\'E1rio existe}\par
187   {\cf18 bool} doesuserfileExists(std::string {\cf17 const} namefile);\par
188 \par
189   {\cf20 // Implementa\'E7\'E3o da fun\'E7\'E3o para criar um arquivo de usu\'E1rio}\par
190   {\cf17 virtual} {\cf18 bool} createFile (std::string {\cf17 const} namefile){\cf17  override }\{\par
191     std::string username = namefile;\par
192     username.erase(username.length() - 4 );\par
193 \par
194     _userfile.open(namefile, std::ios::app);\par
195 \par
196     _userfile << {\cf22 "User: "} << username;\par
197     _userfile << std::endl;\par
198 \par
199     _userfile.close();\par
200 \par
201     {\cf19 return} {\cf17 true};\par
202   \}\par
203 \par
204   {\cf20 // Implementa\'E7\'E3o da fun\'E7\'E3o para pesquisar em um arquivo de usu\'E1rio}\par
205   {\cf17 virtual} {\cf18 bool} searchonFile(std::string username, std::string password){\cf17  override }\{\par
206     std::string user_on_file = {\cf22 "User: "} + username + {\cf22 " // "};\par
207     std::string password_on_file = {\cf22 "Senha: "} + password;\par
208     \par
209     std::string line;\par
210     _file.open({\cf22 "login.txt"}, std::ios::in);\par
211 \par
212     {\cf19 while}(getline(_file, line))\{\par
213       {\cf19 if} (line == user_on_file)\{\par
214         {\cf19 if} (getline(_file, line))\{\par
215           {\cf19 if} (line == password_on_file)\{\par
216             std::cout << {\cf22 "Senha Correta!"} << std::endl;\par
217             std::cout << {\cf22 "-- Logando --"} << std::endl;\par
218 \par
219             _file.seekg(0, std::ios::beg);\par
220             _file.close();\par
221 \par
222             {\cf19 return} {\cf17 true};\par
223           \}\par
224         \}\par
225       \}\par
226     \}\par
227 \par
228     std::cout << {\cf22 "Senha incorreta!"} << std::endl;\par
229 \par
230     _file.seekg(0, std::ios::beg);\par
231     _file.close();\par
232     \par
233     {\cf19 return} {\cf17 false};\par
234   \}\par
235 \par
236 {\cf17 private}:\par
237   std::fstream _userfile;\par
238 \};\par
239 \par
240 {\cf21 #include "empresa_.cpp"}\par
241 \par
242 {\cf21 #endif}\par
243 \par
244 {\cf17 class }FileAux\par
245 \{\par
246 {\cf17 public}:\par
247 \par
248   {\cf18 void} turnintoNamefile(std::string *pointerto_namefile, std::string namefile);\par
249 \par
250   {\cf17 virtual} {\cf18 bool} createFile(std::string {\cf17 const} namefile) = 0;\par
251   {\cf17 virtual} {\cf18 bool} writeonFile(std::string username, std::string password) = 0;\par
252   {\cf17 virtual} {\cf18 void} verifyFile(std::string* search_username_ptr, std::string &search_username) = 0;\par
253   {\cf17 virtual} {\cf18 bool} searchonFile(std::string username, std::string password) = 0;\par
254 \par
255 {\cf17 protected}:\par
256   std::string marker_ = {\cf22 "-------------------"};\par
257 \par
258 \};\par
259 \par
260 \par
261 {\cf17 class }LoginFile : {\cf17 public} FileAux\par
262 \{\par
263 \par
264 {\cf17 public}: \par
265 \par
266   {\cf18 bool} isfileOpen(std::string {\cf17 const} namefile);\par
267 \par
268   {\cf17 virtual} {\cf18 bool} createFile (std::string {\cf17 const} namefile){\cf17  override}\{\par
269   _file.open(namefile, std::ios::out);\par
270 \par
271   _file << {\cf22 "-- Dados de login --"}\par
272       << std::endl;\par
273 \par
274   _file << marker_;\par
275 \par
276   {\cf19 if}(!_file.is_open())\{\par
277     std::cout << {\cf22 "Erro ao abrir o arquivo"} {\cf20 //}\par
278             << std::endl;\par
279 \par
280     {\cf19 return} {\cf17 false};\par
281   \}\par
282 \par
283   std::cout << {\cf22 "Arquivo Aberto"} {\cf20 //}\par
284           << std::endl;\par
285 \par
286   _file.close();\par
287   {\cf19 return} {\cf17 true};\par
288   \}\par
289   \par
290   {\cf17 virtual} {\cf18 bool} writeonFile(std::string username, std::string password){\cf17  override}\{\par
291 \par
292     _file.open({\cf22 "login.txt"}, std::ios::in);\par
293 \par
294     std::string search_word;\par
295     std::string line;\par
296     \par
297     {\cf19 do} \{\par
298       \par
299       {\cf19 if} (_file.eof())\{\par
300         _file.close();\par
301 \par
302         _file.open({\cf22 "login.txt"}, std::ios::app);\par
303 \par
304         _file << std::endl;\par
305         _file << {\cf22 "User: "} << username \par
306               << {\cf22 " // "} << std::endl\par
307               <<{\cf22 "Senha: "} << password \par
308               << std::endl << marker_;\par
309       \}\par
310     \} {\cf19 while} (getline(_file, line));\par
311     \par
312 \par
313     _file.close();\par
314 \par
315     {\cf19 return} {\cf17 true};\par
316   \}\par
317 \par
318   {\cf17 virtual} {\cf18 void} verifyFile(std::string* search_username_ptr, std::string &search_username){\cf17  override}\{\par
319     \par
320     _file.open({\cf22 "login.txt"}, std::ios::in);\par
321 \par
322     std::string line;\par
323     std::string username_string = {\cf22 "User: "} + *search_username_ptr + {\cf22 " // "};\par
324   \par
325     {\cf19 while} (getline(_file, line))\{\par
326 \par
327       {\cf19 if} (line == username_string)\{\par
328         {\cf19 while} (line == username_string)\{\par
329           *search_username_ptr = {\cf22 ""};   {\cf20 // Ressetar o search_username;}\par
330           std::cout << {\cf22 "-- Nome de usuario ja cadastrado --"}\par
331                   << std::endl;\par
332           std::cout << {\cf22 "Digite outro nome de usuario: "};\par
333           \par
334           std::cin >> search_username;\par
335 \par
336           username_string = {\cf22 "User: "} + *search_username_ptr + {\cf22 " // "};\par
337 \par
338         \}\par
339 \par
340         _file.seekg(0, std::ios::beg);\par
341       \}\par
342     \}\par
343 \par
344     _file.close();\par
345   \}\par
346       \par
347   {\cf17 virtual} {\cf18 bool} searchonFile(std::string username, std::string password){\cf17  override}\{\par
348         \par
349     std::string line;\par
350     std::string file_username = {\cf22 "User: "} + username + {\cf22 " // "};\par
351     \par
352     _file.open({\cf22 "login.txt"}, std::ios::in);\par
353     _file.seekg(0, std::ios::beg);\par
354 \par
355     {\cf19 while}(getline(_file, line))\{\par
356         {\cf19 if} (file_username == line)\{\par
357 \par
358           _file.seekg(0, std::ios::beg);\par
359           _file.close();\par
360 \par
361             {\cf19 return} {\cf17 true};\par
362         \}\par
363     \}\par
364 \par
365     _file.seekg(0, std::ios::beg);\par
366     _file.close();\par
367 \par
368     std::cout << {\cf22 "-- Nome de usuario nao encontrado --"} \par
369             << std::endl;\par
370 \par
371     {\cf19 return} {\cf17 false};\par
372         \par
373   \}\par
374 \par
375 {\cf17 protected}:\par
376   std::fstream _file;\par
377 \};\par
378 \par
379 \par
380 {\cf17 class }UserFile : {\cf17 public} LoginFile\par
381 \{\par
382 \par
383 {\cf17 public}:\par
384 \par
385   {\cf18 bool} doesuserfileExists(std::string {\cf17 const} namefile);\par
386 \par
387   {\cf17 virtual} {\cf18 bool} createFile (std::string {\cf17 const} namefile){\cf17  override}\{\par
388 \par
389     std::string username = namefile;\par
390     username.erase(username.length() - 4 );\par
391 \par
392     _userfile.open(namefile, std::ios::app);\par
393 \par
394     _userfile << {\cf22 "User: "} << username;\par
395     _userfile << std::endl;\par
396 \par
397     _userfile.close();\par
398 \par
399     {\cf19 return} {\cf17 true};\par
400   \}\par
401 \par
402 \par
403   {\cf17 virtual} {\cf18 bool} searchonFile(std::string username, std::string password){\cf17  override}\{\par
404     \par
405     std::string user_on_file = {\cf22 "User: "} + username + {\cf22 " // "};\par
406     std::string password_on_file = {\cf22 "Senha: "} + password;\par
407     \par
408     std::string line;\par
409     _file.open({\cf22 "login.txt"}, std::ios::in);\par
410 \par
411     {\cf19 while}(getline(_file, line))\{\par
412 \par
413       {\cf19 if} (line == user_on_file)\{\par
414         {\cf19 if} (getline(_file, line))\{\par
415           {\cf19 if} (line == password_on_file)\{\par
416             std::cout << {\cf22 "Senha Correta!"}\par
417                 << std::endl;\par
418             std::cout << {\cf22 "-- Logando --"}\par
419                 << std::endl;\par
420 \par
421             _file.seekg(0, std::ios::beg);\par
422             _file.close();\par
423 \par
424             {\cf19 return} {\cf17 true};\par
425           \}\par
426         \}\par
427       \}\par
428     \}\par
429 \par
430     std::cout << {\cf22 "Senha incorreta!"}\par
431             << std::endl;\par
432 \par
433     _file.seekg(0, std::ios::beg);\par
434     _file.close();\par
435     \par
436     {\cf19 return} {\cf17 false};\par
437 \par
438   \}\par
439 \par
440 {\cf17 private}:\par
441   std::fstream _userfile;\par
442 \};\par
443 \par
444 {\cf21 #include "empresa_.cpp"}\par
445 \par
446 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/empresa_.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/empresa_.cpp}
{\xe \v ArquivosDeCodigo/empresa_.cpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
empresa_.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/empresa_.cpp}
{\xe \v ArquivosDeCodigo/empresa_.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Implementa\'E7\'E3o das fun\'E7\'F5es contidas nas classes e arquivo empresa.hpp}\par
2 \par
3 {\cf20 // Fun\'E7\'E3o para exibir as senhas armazenadas no objeto Cadastro}\par
4 {\cf18 void} Cadastro::showPasswords()\{\par
5   {\cf19 for} ({\cf18 unsigned} {\cf18 int} i = 0; i < Password.size(); i++)\{\par
6     std::cout << Password.at(i) << std::endl;\par
7   \} \par
8 \}\par
9 \par
10 {\cf20 // Fun\'E7\'E3o para exibir os nomes de usu\'E1rio armazenados no objeto Cadastro}\par
11 {\cf18 void} Cadastro::showUsernames()\{\par
12   {\cf19 for} ({\cf18 unsigned} {\cf18 int} i = 0; i < Username.size(); i++)\{\par
13     std::cout << Username.at(i) << std::endl;\par
14   \}  \par
15 \}\par
16 \par
17 {\cf20 // Fun\'E7\'E3o para inserir um nome de usu\'E1rio no objeto Cadastro}\par
18 {\cf18 void} Cadastro::insertUsername(std::string username)\{\par
19     Username.push_back(username);\par
20 \}\par
21 \par
22 {\cf20 // Fun\'E7\'E3o para inserir uma senha no objeto Cadastro}\par
23 {\cf18 void} Cadastro::insertPassword(std::string password)\{\par
24     Password.push_back(password);\par
25 \}\par
26 \par
27 {\cf20 // Fun\'E7\'E3o para confirmar uma senha no objeto Cadastro}\par
28 {\cf18 bool} Cadastro::confirmPassword(std::string confirmation_password)\{\par
29   {\cf19 if} (confirmation_password == Password.back()) {\cf19 return} {\cf17 true};\par
30   {\cf19 return} {\cf17 false};\par
31 \}\par
32 \par
33 {\cf20 // Fun\'E7\'E3o para excluir o \'FAltimo nome de usu\'E1rio cadastrado no objeto Cadastro}\par
34 {\cf18 void} Cadastro::deleteUsername()\{\par
35   Username.erase(Username.end() - 1);\par
36 \}\par
37 \par
38 {\cf20 // Fun\'E7\'E3o para excluir a \'FAltima senha cadastrada no objeto Cadastro}\par
39 {\cf18 void} Cadastro::deletePassword()\{\par
40   Password.erase(Password.end() - 1);\par
41 \}\par
42 \par
43 {\cf20 // Fun\'E7\'E3o para transformar o nome em um nome de arquivo com extens\'E3o .txt}\par
44 {\cf18 void} FileAux::turnintoNamefile(std::string* pointerto_namefile, std::string name)\{\par
45   std::string namefile = name + {\cf22 ".txt"};\par
46   *pointerto_namefile = name + {\cf22 ".txt"};\par
47 \}\par
48 \par
49 {\cf20 // Fun\'E7\'E3o para verificar se um arquivo est\'E1 aberto}\par
50 {\cf18 bool} LoginFile::isfileOpen(std::string {\cf17 const} namefile)\{\par
51   std::fstream file(namefile);\par
52   {\cf19 return} file.is_open();\par
53 \}\par
54 \par
55 {\cf20 // Fun\'E7\'E3o para verificar se o arquivo de usu\'E1rio existe}\par
56 {\cf18 bool} UserFile::doesuserfileExists(std::string {\cf17 const} namefile)\{\par
57   std::fstream file(namefile);\par
58   {\cf19 return} file.is_open();\par
59 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/main.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/main.cpp}
{\xe \v ArquivosDeCodigo/main.cpp}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "empresa.hpp"}\par
{\f2 #include "produto.hpp"}\par
{\f2 #include "verificador.hpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <string>}\par
{\f2 #include <cstdlib>}\par
{\f2 #include <fstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MARKER}\~ "------------------------"\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v MARKER\:main.cpp}
{\xe \v main.cpp\:MARKER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MARKER\~ "------------------------"}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 13            \{\par
14 \par
15 Cadastro cadastro;\par
16 LoginFile login_file;\par
17 \par
18 UserFile user_file;\par
19 std::string *user_filename_ptr;\par
20 std::string userfile_name;\par
21 \par
22 std::string {\cf17 const} login_filename = {\cf22 "login.txt"};\par
23 \par
24 {\cf20 // Verificar se o arquivo de login existe, caso contr\'E1rio, cri\'E1-lo}\par
25 {\cf19 if} (!login_file.isfileOpen(login_filename))\{\par
26         std::cout << {\cf22 "arquivo existe"} << std::endl;\par
27         login_file.createFile(login_filename);\par
28 \}\par
29 \par
30 std::string* username_ptr;\par
31 std::string username;\par
32 \par
33 std::string password;\par
34 std::string confirmation_password;\par
35 \par
36 std::string teste;\par
37 \par
38 {\cf18 char} choice;\par
39 {\cf18 char} continue_choice;\par
40 \par
41 {\cf18 unsigned} loop = 0;\par
42 \par
43 {\cf18 bool} userexists_verify;\par
44 {\cf18 bool} correct_password;\par
45 \par
46 {\cf19 while}(loop == 0)\{     \par
47 \par
48     std::cout << MARKER << std::endl;\par
49     std::cout << {\cf22 "Escolha uma das opcoes"} << std::endl;\par
50     std::cout << {\cf22 "1 - Login"} << std::endl;\par
51     std::cout << {\cf22 "2 - Cadastro"} << std::endl;\par
52     std::cout << {\cf22 "3 - Sair"} << std::endl;\par
53     std::cout << MARKER << std::endl;\par
54     \par
55     std::cin >> choice;\par
56 \par
57     {\cf19 switch}(choice)\{\par
58         {\cf19 case} {\cf23 '1'}:\par
59                 {\cf18 unsigned} {\cf18 int} second_choice;\par
60                 std::cout << {\cf22 "-- Fazendo login --"} << std::endl;\par
61                 std::cout << {\cf22 "Digite o nome de usuario: "};\par
62                 std::cin >> username;\par
63 \par
64                 {\cf20 // Verificar se o usu\'E1rio existe no arquivo de login}\par
65                 userexists_verify = login_file.searchonFile(username, password);\par
66 \par
67                 {\cf19 if} (!userexists_verify)\{\par
68                         {\cf19 while} (!userexists_verify)\{\par
69                                 std::cout << MARKER << std::endl;\par
70                                 std::cout << {\cf22 "Escolha uma das opcoes"} << std::endl;\par
71                                 std::cout << {\cf22 "1 - Digitar outro nome de usuario"} << std::endl;\par
72                                 std::cout << {\cf22 "2 - Sair"} << std:: endl;\par
73                                 std::cout << MARKER << std::endl;\par
74                                 std::cin >> second_choice;\par
75 \par
76                                 {\cf19 if} (second_choice == 1)\{\par
77                                         std::cout << {\cf22 "Digite o nome de usuario: "};\par
78                                         std::cin >> username;\par
79                                         userexists_verify = login_file.searchonFile(username, password);\par
80                                 \}\par
81                                 {\cf19 else} \{\par
82                                         std::cout << {\cf22 "saindo"} << std::endl;\par
83                                         {\cf19 break};\par
84                                 \}\par
85                         \}\par
86                 \}\par
87 \par
88                 userfile_name = username;\par
89                 user_filename_ptr = &userfile_name;\par
90 \par
91                 {\cf20 // Transformar o nome do usu\'E1rio em um nome de arquivo}\par
92                 user_file.turnintoNamefile(user_filename_ptr, userfile_name);\par
93 \par
94                 {\cf19 if} (userexists_verify == {\cf17 true})\{\par
95                         {\cf19 if}(!user_file.doesuserfileExists(userfile_name))\{\par
96                                 std::cout << {\cf22 "-- Arquivo nao existe --"} << std::endl;\par
97                                 std::cout << {\cf22 "-- Criando arquivo --"} << std::endl;\par
98                                 user_file.createFile(userfile_name);\par
99                         \}\par
100 \par
101                         std::cout << {\cf22 "Digite a senha: "};\par
102                         std::cin >> password;\par
103                         correct_password = user_file.searchonFile(username, password);\par
104 \par
105                         {\cf19 if} (correct_password == {\cf17 true})\{\par
106                                 std::cout << {\cf22 "-- Voce esta logado como: "} << username << std::endl;\par
107 \par
108                                 productRegister(userfile_name);\par
109 \par
110                         \}       \par
111 \par
112                         {\cf19 if} (!correct_password)\{\par
113                                 {\cf18 char} incorrect_password_choice;\par
114                                 std::cout << MARKER << std::endl;\par
115                                 std::cout << {\cf22 "1 - Deseja digitar a senha novamente? "} << std::endl;\par
116                                 std::cout << {\cf22 "'S' - Sim // 'N' - Nao"} << std::endl;\par
117                                 std::cin >> incorrect_password_choice;\par
118                                 std::cout << MARKER << std::endl;\par
119 \par
120                                 {\cf19 while} ((incorrect_password_choice == {\cf23 's'}) || (incorrect_password_choice == {\cf23 'S'}))\{\par
121                                         std::cout << {\cf22 "Digite a senha novamente: "};\par
122                                         std::cin >> password;\par
123                                         correct_password = user_file.searchonFile(username, password);\par
124 \par
125                                         {\cf19 if} (correct_password == {\cf17 true})\{\par
126                                                 std::cout << {\cf22 "-- Voce esta logado como: "} << username << std::endl;\par
127                                                 productRegister(userfile_name);\par
128                                                 {\cf19 break};\par
129                                         \}\par
130 \par
131                                         {\cf19 if}(!correct_password)\{\par
132                                                 std::cout << {\cf22 "1 - Deseja digitar a senha novamente? "} << std::endl;\par
133                                                 std::cout << {\cf22 "'S' - Sim // 'N' - Nao"} << std::endl;\par
134                                                 std::cin >> incorrect_password_choice;\par
135                                                 std::cout << MARKER << std::endl;\par
136                                         \}\par
137                                 \}\par
138                         \}\par
139                 \}\par
140 \par
141         {\cf19 break};\par
142 \par
143         {\cf19 case} {\cf23 '2'}:\par
144                 std::cout << {\cf22 "-- Fazendo cadastro --"} << std::endl;\par
145 \par
146                 std::cout << {\cf22 "Digite o nome de usuario: "};\par
147                 std::cin >> username;\par
148                 username_ptr = &username;\par
149                 login_file.verifyFile(username_ptr, username);\par
150 \par
151                 cadastro.insertUsername(username);\par
152 \par
153                 std::cout << {\cf22 "Digite a senha: "};\par
154                 std::cin >> password;\par
155                 cadastro.insertPassword(password);\par
156 \par
157                 std::cout << {\cf22 "Confirme a senha: "};\par
158                 std::cin >> confirmation_password;\par
159 \par
160                 {\cf19 for} ({\cf18 unsigned} {\cf18 int} i = 0; i < 1; i++)\{    \par
161                         {\cf19 if} (confirmation_password != password)\{\par
162                                 std::cout << {\cf22 "-- SENHA ERRADA --"} << std::endl;\par
163                                 std::cout << {\cf22 "-- CONFIRME A SENHA NOVAMENTE --"} << std::endl;\par
164                                 std::cout << {\cf22 "Digite a senha: "};\par
165                                 std::cin >> confirmation_password;\par
166 \par
167                                 {\cf19 if} (confirmation_password != password)\{\par
168                                         std::cout << {\cf22 "-- SENHA ERRADA --"} << std::endl;\par
169                                         std::cout << {\cf22 "-- REALIZE O CADASTRO NOVAMENTE --"} << std::endl;\par
170                                         cadastro.deleteUsername();\par
171                                         cadastro.deletePassword();\par
172                                         i = 3;\par
173                                 \}   \par
174                                 {\cf19 else} \{\par
175                                         std::cout << {\cf22 "-- Cadastro Finalizado --"} << std::endl;\par
176                                         login_file.writeonFile(username, password);\par
177                                         i = 3;\par
178                                 \}\par
179                         \}\par
180                         {\cf19 else}  \{\par
181                                 std::cout << {\cf22 "-- Cadastro Finalizado --"} << std::endl;\par
182                                 login_file.writeonFile(username, password);\par
183                                 i = 3;\par
184                         \}\par
185                 \}      \par
186 \par
187                 std::cout << {\cf22 "Digite 0 para continuar: "};\par
188                 std::cin >> continue_choice;\par
189                 {\cf19 if} (continue_choice == {\cf23 '0'})\{\par
190                         {\cf19 break};\par
191                 \}\par
192                 \par
193                 loop =  1;\par
194 \par
195                 std::cout << {\cf22 "Saindo..."} << std::endl;\par
196                 {\cf19 return} 0;\par
197                 {\cf19 break};\par
198 \par
199         {\cf19 case} {\cf23 '3'}:\par
200             std::cout << {\cf22 "Saindo..."} << std::endl;\par
201             loop = 1;\par
202         {\cf19 break};\par
203 \par
204         {\cf19 default}: \par
205                 std::cout << {\cf22 "-- Numero de escolha invalido --"} << std::endl;\par
206         {\cf19 break};\par
207 \par
208    \}\par
209  \}\par
210 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/produto.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/produto.cpp}
{\xe \v ArquivosDeCodigo/produto.cpp}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "produto.hpp"}\par
{\f2 #include <sstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b cadastrarProduto} (const std::string &nomeArquivo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removerProduto} (const std::string &nomeArquivo, const std::string &nomeProduto)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b venda} (const std::string &palavraDesejada, const std::string &nomeArquivo, int numeroSubtrair)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b productRegister} (const std::string &nomeArquivo)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v cadastrarProduto\:produto.cpp}
{\xe \v produto.cpp\:cadastrarProduto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void cadastrarProduto (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 34                                                     \{\par
35     std::fstream arquivo(nomeArquivo, std::ios::app);\par
36 \par
37     arquivo << {\cf22 "Codigo"} << {\cf22 "  "} << {\cf22 "Nome"} << {\cf22 "  "} << {\cf22 "Categoria"} << {\cf22 "  "} << {\cf22 "Preco"} << {\cf22 "  "} << {\cf22 "Unidade"}\par
38         << {\cf22 "  "} << {\cf22 "Quantidade"}\par
39         << std::endl;\par
40     arquivo << {\cf22 "----------------------------------"} << std::endl;\par
41 \par
42     {\cf19 if} (!arquivo.is_open()) \{\par
43         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
44         {\cf19 return};\par
45     \}\par
46 \par
47     std::vector<Produto> produtos;\par
48     {\cf18 char} continuar;\par
49 \par
50     {\cf19 do} \{\par
51         std::string nome, codigo, categoria, unidade;\par
52         {\cf18 double} preco;\par
53         {\cf18 int} quantidade;\par
54 \par
55         std::cout << {\cf22 "Codigo do produto: "};\par
56         std::cin >> codigo;\par
57         std::cin.ignore();\par
58 \par
59         std::cout << {\cf22 "Nome do produto: "};\par
60         std::getline(std::cin, nome);\par
61 \par
62         std::cout << {\cf22 "Categoria do produto: "};\par
63         std::getline(std::cin, categoria);\par
64 \par
65         std::cout << {\cf22 "Preco do produto: "};\par
66         std::cin >> preco;\par
67 \par
68         std::cout << {\cf22 "Unidade (cx ou un): "};\par
69         std::cin.ignore();\par
70         std::getline(std::cin, unidade);\par
71 \par
72         std::cout << {\cf22 "Quantidade: "};\par
73         std::cin >> quantidade;\par
74 \par
75         Verificador verificador(nomeArquivo);\par
76         {\cf19 while} (verificador.verificar(nome) || verificador.verificar(codigo)) \{\par
77             {\cf19 if} (verificador.verificar(codigo)) \{\par
78                 std::cout << {\cf22 "Codigo ja cadastrado, escreva um novo codigo: "};\par
79                 std::cin >> codigo;\par
80             \} {\cf19 else} {\cf19 if} (verificador.verificar(nome)) \{\par
81                 std::cout << {\cf22 "Nome ja cadastrado, escreva um novo nome."};\par
82                 std::cin >> nome;\par
83             \}\par
84         \}\par
85 \par
86         produtos.emplace_back(nome, codigo, categoria, preco, unidade, quantidade);\par
87 \par
88         std::cout << {\cf22 "Deseja cadastrar outro produto? (S/N): "} << std::endl;\par
89         std::cin >> continuar;\par
90 \par
91     \} {\cf19 while} (continuar == {\cf23 'S'} || continuar == {\cf23 's'});\par
92 \par
93     {\cf19 for} ({\cf17 const} Produto& produto : produtos) \{\par
94         arquivo << produto.getCodigo() << {\cf22 "   |"} << produto.getNome() << {\cf22 "   |"} << produto.getCategoria()\par
95             << {\cf22 "   |"} << {\cf22 "R$"} << produto.getPreco() << {\cf22 "   |"} << produto.getUnidade() << {\cf22 "   |"} << produto.getQuantidade()\par
96             << std::endl;\par
97         arquivo << {\cf22 "----------------------------------"} << std::endl;\par
98     \}\par
99 \par
100     arquivo.close();\par
101 \par
102     std::cout << {\cf22 "Cadastro de produtos conclu\'EDdo."} << std::endl;\par
103 \}\par
}
}
{\xe \v productRegister\:produto.cpp}
{\xe \v produto.cpp\:productRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void productRegister (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 202                                                    \{\par
203     {\cf19 while} ({\cf17 true}) \{\{\par
204         std::cout << MARKER << std::endl;\par
205         std::cout << {\cf22 "Selecione uma opcao:"} << std::endl;\par
206         std::cout << {\cf22 "1. Cadastrar produto"} << std::endl;\par
207         std::cout << {\cf22 "2. Verificar produto em estoque"} << std::endl;\par
208         std::cout << {\cf22 "3. Mostrar estoque"} << std::endl;\par
209         std::cout << {\cf22 "4. Remover produto"} << std::endl;\par
210         std::cout << {\cf22 "5. Vender produto"} << std::endl;\par
211         std::cout << {\cf22 "6. Voltar para pagina inicial"} << std::endl;\par
212         std::cout << MARKER << std::endl;\par
213 \par
214         {\cf18 int} opcao;\par
215         std::cin >> opcao;\par
216 \par
217         {\cf19 if} (opcao == 1) \{\par
218             cadastrarProduto(nomeArquivo);\par
219         \} {\cf19 else} {\cf19 if} (opcao == 2) \{\par
220         std::cout << {\cf22 "Digite o codigo do produto a ser verificado: "};\par
221         std::string nome;\par
222         std::cin >> nome;\par
223 \par
224         Verificador verificador(nomeArquivo);\par
225         std::string linha = verificador.linhaEncontrada(nome);\par
226 \par
227         {\cf19 if} (linha != {\cf22 "Palavra n\'E3o encontrada."}) \{\par
228                 std::cout << {\cf22 "Produto encontrado!"} \par
229                         << std::endl;\par
230                 std::cout << {\cf22 "--------------------------------"} \par
231                         << std::endl;\par
232                 std::cout << {\cf22 "Codigo"} << {\cf22 "  "} << {\cf22 "Nome"} << {\cf22 "  "} \par
233                         << {\cf22 "Categoria"} << {\cf22 "  "} << {\cf22 "Preco"} \par
234                                                 << std::endl;\par
235                 std::cout << linha \par
236                         << std::endl;\par
237                 std::cout << {\cf22 "--------------------------------"} \par
238                         << std::endl;\par
239                 std::string proxLinha = verificador.proxLinha(nome);\par
240                 std::cout << {\cf22 "--------------------------------"} \par
241                         << std::endl;\par
242 \par
243                 {\cf19 if} (proxLinha != {\cf22 "Linha nao encontrada."}) \{\par
244                         std::cout << {\cf22 "Estoque: "} << proxLinha << std::endl;\par
245                 \} {\cf19 else} \{\par
246                         std::cout << {\cf22 "Nao ha registro de estoque do produto informado."} << std::endl;\par
247                 \}\par
248         \}\par
249             \par
250         \} {\cf19 else} {\cf19 if} (opcao == 3) \{\par
251             std::string linha;\par
252             std::ifstream arquivo(nomeArquivo);\par
253                 {\cf19 while}(std::getline(arquivo, linha))\{\par
254             std::cout << linha << std::endl;\par
255         \}     \par
256         \} {\cf19 else} {\cf19 if} (opcao == 4) \{\par
257             std::cout << {\cf22 "Digite o nome do produto a ser removido: "};\par
258             std::string nomeProduto;\par
259             std::cin.ignore();\par
260             std::getline(std::cin, nomeProduto);\par
261             removerProduto(nomeArquivo, nomeProduto);\par
262         \} {\cf19 else} {\cf19 if} (opcao == 5) \{\par
263             std::cout << {\cf22 "Digite a o produto a ser vendido: "};\par
264             std::string nomeProduto;\par
265             std::cin.ignore();\par
266             std::getline(std::cin, nomeProduto);\par
267             std::cout << std::endl;\par
268             std::cout << {\cf22 "Digite a quantidade a ser vendida: "};\par
269             {\cf18 int} quantidade;\par
270             std::cin >> quantidade;\par
271             std::cout << std::endl;\par
272             venda(nomeProduto, nomeArquivo, quantidade);\par
273     \par
274         \}{\cf19 else} {\cf19 if} (opcao == 6) \{\par
275             {\cf19 break};\par
276         \} {\cf19 else} \{\par
277             std::cout << {\cf22 "Opcao invalida. Tente novamente."} << std::endl;\par
278         \}\par
279     \}\par
280 \}\}\par
}
}
{\xe \v removerProduto\:produto.cpp}
{\xe \v produto.cpp\:removerProduto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void removerProduto (const std::string &  {\i nomeArquivo}, const std::string &  {\i nomeProduto})}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 105                                                                                 \{\par
106     std::ifstream arquivo(nomeArquivo);\par
107     {\cf19 if} (!arquivo.is_open()) \{\par
108         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
109         {\cf19 return};\par
110     \}\par
111 \par
112     std::vector<std::string> linhas;\par
113     std::string linha;\par
114 \par
115     {\cf19 while} (std::getline(arquivo, linha)) \{\par
116         {\cf19 if} (linha.find(nomeProduto) == std::string::npos) \{\par
117             linhas.push_back(linha);\par
118         \}\par
119     \}\par
120 \par
121     arquivo.close();\par
122 \par
123     std::ofstream arquivoAtualizado(nomeArquivo);\par
124     {\cf19 if} (!arquivoAtualizado.is_open()) \{\par
125         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
126         {\cf19 return};\par
127     \}\par
128 \par
129     {\cf19 for} ({\cf17 const} std::string& linhaAtualizada : linhas) \{\par
130         arquivoAtualizado << linhaAtualizada << std::endl;\par
131     \}\par
132 \par
133     arquivoAtualizado.close();\par
134 \par
135     std::cout << {\cf22 "Produto removido com sucesso."} << std::endl;\par
136 \}\par
}
}
{\xe \v venda\:produto.cpp}
{\xe \v produto.cpp\:venda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void venda (const std::string &  {\i palavraDesejada}, const std::string &  {\i nomeArquivo}, int  {\i numeroSubtrair})}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 138                                                                                                \{\par
139     std::ifstream arquivoIn(nomeArquivo); {\cf20 // Abrir o arquivo de entrada}\par
140     \par
141     {\cf19 if} (!arquivoIn.is_open()) \{\par
142         std::cout << {\cf22 "Erro ao abrir o arquivo de entrada."} << std::endl;\par
143         {\cf19 return};\par
144     \}\par
145     \par
146     std::ofstream arquivoOut({\cf22 "temp.txt"}); {\cf20 // Abrir um arquivo tempor\'E1rio para escrever}\par
147     \par
148     {\cf19 if} (!arquivoOut.is_open()) \{\par
149         std::cout << {\cf22 "Erro ao abrir o arquivo tempor\'E1rio."} << std::endl;\par
150         {\cf19 return};\par
151     \}\par
152     \par
153     std::string linha;\par
154     \par
155     {\cf19 while} (std::getline(arquivoIn, linha)) \{\par
156         std::istringstream iss(linha);\par
157         std::string palavra;\par
158         {\cf18 int} ultimoNumero = 0;\par
159         \par
160         {\cf20 // Procura pela palavra desejada na linha}\par
161         {\cf18 size_t} pos = linha.find(palavraDesejada);\par
162         \par
163         {\cf19 if} (pos != std::string::npos) \{\par
164             {\cf20 // L\'EA o \'FAltimo n\'FAmero da linha}\par
165             {\cf19 while} (iss >> palavra) \{\par
166                 std::istringstream issNumero(palavra);\par
167                 {\cf18 int} numero;\par
168                 \par
169                 {\cf19 if} (issNumero >> numero) \{\par
170                     ultimoNumero = numero;\par
171                     std::cout << numero << std::endl;\par
172                 \}\par
173             \}\par
174             \par
175             {\cf19 if} (ultimoNumero >= numeroSubtrair)\{\par
176             {\cf20 // Subtrai o n\'FAmero fornecido do \'FAltimo n\'FAmero}\par
177             ultimoNumero -= numeroSubtrair;\par
178             \par
179             {\cf20 // Substitui o \'FAltimo n\'FAmero na linha}\par
180             std::string novoUltimoNumero = std::to_string(ultimoNumero);\par
181             linha.replace(pos, palavraDesejada.length(), novoUltimoNumero);\par
182             \}{\cf19 else} \{\par
183                 std::cout << {\cf22 "Quantidade em estoque insuficiente."} << std::endl;\par
184                 {\cf19 return};\par
185             \}\par
186         \}\par
187         \par
188         {\cf20 // Escreve a linha no arquivo tempor\'E1rio}\par
189         arquivoOut << linha << std::endl;\par
190     \}\par
191     \par
192     arquivoIn.close(); {\cf20 // Fechar o arquivo de entrada}\par
193     arquivoOut.close(); {\cf20 // Fechar o arquivo temporari}\par
194     \par
195     {\cf20 // Substitui o arquivo original pelo arquivo temporario}\par
196     std::remove(nomeArquivo.c_str());\par
197     std::rename({\cf22 "temp.txt"}, nomeArquivo.c_str());\par
198     \par
199     std::cout << {\cf22 "Venda de "} << numeroSubtrair << {\cf22 " "} << palavraDesejada << {\cf22 " realizada com sucesso"} << std::endl;\par
200 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
produto.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/produto.cpp}
{\xe \v ArquivosDeCodigo/produto.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include "produto.hpp"}\par
2 {\cf21 #include <sstream>}\par
3 \par
4 \par
5 Produto::Produto({\cf17 const} std::string& nome, {\cf17 const} std::string& codigo, {\cf17 const} std::string& categoria, {\cf18 double} preco, {\cf17 const} std::string& unidade, {\cf18 int} quantidade)\par
6     : _nome(nome), _codigo(codigo), _categoria(categoria), _preco(preco), _unidade(unidade), _quantidade(quantidade) \{\par
7     {\cf20 // ...}\par
8 \}\par
9 \par
10 std::string Produto::getNome(){\cf17  const }\{\par
11     {\cf19 return} _nome;\par
12 \}\par
13 \par
14 std::string Produto::getCodigo(){\cf17  const }\{\par
15     {\cf19 return} _codigo;\par
16 \}\par
17 \par
18 std::string Produto::getCategoria(){\cf17  const }\{\par
19     {\cf19 return} _categoria;\par
20 \}\par
21 \par
22 {\cf18 double} Produto::getPreco(){\cf17  const }\{\par
23     {\cf19 return} _preco;\par
24 \}\par
25 \par
26 std::string Produto::getUnidade(){\cf17  const }\{\par
27     {\cf19 return} _unidade;\par
28 \}\par
29 \par
30 {\cf18 int} Produto::getQuantidade(){\cf17  const }\{\par
31     {\cf19 return} _quantidade;\par
32 \}\par
33 \par
34 {\cf18 void} cadastrarProduto({\cf17 const} std::string& nomeArquivo) \{\par
35     std::fstream arquivo(nomeArquivo, std::ios::app);\par
36 \par
37     arquivo << {\cf22 "Codigo"} << {\cf22 "  "} << {\cf22 "Nome"} << {\cf22 "  "} << {\cf22 "Categoria"} << {\cf22 "  "} << {\cf22 "Preco"} << {\cf22 "  "} << {\cf22 "Unidade"}\par
38         << {\cf22 "  "} << {\cf22 "Quantidade"}\par
39         << std::endl;\par
40     arquivo << {\cf22 "----------------------------------"} << std::endl;\par
41 \par
42     {\cf19 if} (!arquivo.is_open()) \{\par
43         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
44         {\cf19 return};\par
45     \}\par
46 \par
47     std::vector<Produto> produtos;\par
48     {\cf18 char} continuar;\par
49 \par
50     {\cf19 do} \{\par
51         std::string nome, codigo, categoria, unidade;\par
52         {\cf18 double} preco;\par
53         {\cf18 int} quantidade;\par
54 \par
55         std::cout << {\cf22 "Codigo do produto: "};\par
56         std::cin >> codigo;\par
57         std::cin.ignore();\par
58 \par
59         std::cout << {\cf22 "Nome do produto: "};\par
60         std::getline(std::cin, nome);\par
61 \par
62         std::cout << {\cf22 "Categoria do produto: "};\par
63         std::getline(std::cin, categoria);\par
64 \par
65         std::cout << {\cf22 "Preco do produto: "};\par
66         std::cin >> preco;\par
67 \par
68         std::cout << {\cf22 "Unidade (cx ou un): "};\par
69         std::cin.ignore();\par
70         std::getline(std::cin, unidade);\par
71 \par
72         std::cout << {\cf22 "Quantidade: "};\par
73         std::cin >> quantidade;\par
74 \par
75         Verificador verificador(nomeArquivo);\par
76         {\cf19 while} (verificador.verificar(nome) || verificador.verificar(codigo)) \{\par
77             {\cf19 if} (verificador.verificar(codigo)) \{\par
78                 std::cout << {\cf22 "Codigo ja cadastrado, escreva um novo codigo: "};\par
79                 std::cin >> codigo;\par
80             \} {\cf19 else} {\cf19 if} (verificador.verificar(nome)) \{\par
81                 std::cout << {\cf22 "Nome ja cadastrado, escreva um novo nome."};\par
82                 std::cin >> nome;\par
83             \}\par
84         \}\par
85 \par
86         produtos.emplace_back(nome, codigo, categoria, preco, unidade, quantidade);\par
87 \par
88         std::cout << {\cf22 "Deseja cadastrar outro produto? (S/N): "} << std::endl;\par
89         std::cin >> continuar;\par
90 \par
91     \} {\cf19 while} (continuar == {\cf23 'S'} || continuar == {\cf23 's'});\par
92 \par
93     {\cf19 for} ({\cf17 const} Produto& produto : produtos) \{\par
94         arquivo << produto.getCodigo() << {\cf22 "   |"} << produto.getNome() << {\cf22 "   |"} << produto.getCategoria()\par
95             << {\cf22 "   |"} << {\cf22 "R$"} << produto.getPreco() << {\cf22 "   |"} << produto.getUnidade() << {\cf22 "   |"} << produto.getQuantidade()\par
96             << std::endl;\par
97         arquivo << {\cf22 "----------------------------------"} << std::endl;\par
98     \}\par
99 \par
100     arquivo.close();\par
101 \par
102     std::cout << {\cf22 "Cadastro de produtos conclu\'EDdo."} << std::endl;\par
103 \}\par
104 \par
105 {\cf18 void} removerProduto({\cf17 const} std::string& nomeArquivo, {\cf17 const} std::string& nomeProduto) \{\par
106     std::ifstream arquivo(nomeArquivo);\par
107     {\cf19 if} (!arquivo.is_open()) \{\par
108         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
109         {\cf19 return};\par
110     \}\par
111 \par
112     std::vector<std::string> linhas;\par
113     std::string linha;\par
114 \par
115     {\cf19 while} (std::getline(arquivo, linha)) \{\par
116         {\cf19 if} (linha.find(nomeProduto) == std::string::npos) \{\par
117             linhas.push_back(linha);\par
118         \}\par
119     \}\par
120 \par
121     arquivo.close();\par
122 \par
123     std::ofstream arquivoAtualizado(nomeArquivo);\par
124     {\cf19 if} (!arquivoAtualizado.is_open()) \{\par
125         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
126         {\cf19 return};\par
127     \}\par
128 \par
129     {\cf19 for} ({\cf17 const} std::string& linhaAtualizada : linhas) \{\par
130         arquivoAtualizado << linhaAtualizada << std::endl;\par
131     \}\par
132 \par
133     arquivoAtualizado.close();\par
134 \par
135     std::cout << {\cf22 "Produto removido com sucesso."} << std::endl;\par
136 \}\par
137 \par
138 {\cf18 void} venda({\cf17 const} std::string& palavraDesejada, {\cf17 const} std::string& nomeArquivo, {\cf18 int} numeroSubtrair) \{\par
139     std::ifstream arquivoIn(nomeArquivo); {\cf20 // Abrir o arquivo de entrada}\par
140     \par
141     {\cf19 if} (!arquivoIn.is_open()) \{\par
142         std::cout << {\cf22 "Erro ao abrir o arquivo de entrada."} << std::endl;\par
143         {\cf19 return};\par
144     \}\par
145     \par
146     std::ofstream arquivoOut({\cf22 "temp.txt"}); {\cf20 // Abrir um arquivo tempor\'E1rio para escrever}\par
147     \par
148     {\cf19 if} (!arquivoOut.is_open()) \{\par
149         std::cout << {\cf22 "Erro ao abrir o arquivo tempor\'E1rio."} << std::endl;\par
150         {\cf19 return};\par
151     \}\par
152     \par
153     std::string linha;\par
154     \par
155     {\cf19 while} (std::getline(arquivoIn, linha)) \{\par
156         std::istringstream iss(linha);\par
157         std::string palavra;\par
158         {\cf18 int} ultimoNumero = 0;\par
159         \par
160         {\cf20 // Procura pela palavra desejada na linha}\par
161         {\cf18 size_t} pos = linha.find(palavraDesejada);\par
162         \par
163         {\cf19 if} (pos != std::string::npos) \{\par
164             {\cf20 // L\'EA o \'FAltimo n\'FAmero da linha}\par
165             {\cf19 while} (iss >> palavra) \{\par
166                 std::istringstream issNumero(palavra);\par
167                 {\cf18 int} numero;\par
168                 \par
169                 {\cf19 if} (issNumero >> numero) \{\par
170                     ultimoNumero = numero;\par
171                     std::cout << numero << std::endl;\par
172                 \}\par
173             \}\par
174             \par
175             {\cf19 if} (ultimoNumero >= numeroSubtrair)\{\par
176             {\cf20 // Subtrai o n\'FAmero fornecido do \'FAltimo n\'FAmero}\par
177             ultimoNumero -= numeroSubtrair;\par
178             \par
179             {\cf20 // Substitui o \'FAltimo n\'FAmero na linha}\par
180             std::string novoUltimoNumero = std::to_string(ultimoNumero);\par
181             linha.replace(pos, palavraDesejada.length(), novoUltimoNumero);\par
182             \}{\cf19 else} \{\par
183                 std::cout << {\cf22 "Quantidade em estoque insuficiente."} << std::endl;\par
184                 {\cf19 return};\par
185             \}\par
186         \}\par
187         \par
188         {\cf20 // Escreve a linha no arquivo tempor\'E1rio}\par
189         arquivoOut << linha << std::endl;\par
190     \}\par
191     \par
192     arquivoIn.close(); {\cf20 // Fechar o arquivo de entrada}\par
193     arquivoOut.close(); {\cf20 // Fechar o arquivo temporari}\par
194     \par
195     {\cf20 // Substitui o arquivo original pelo arquivo temporario}\par
196     std::remove(nomeArquivo.c_str());\par
197     std::rename({\cf22 "temp.txt"}, nomeArquivo.c_str());\par
198     \par
199     std::cout << {\cf22 "Venda de "} << numeroSubtrair << {\cf22 " "} << palavraDesejada << {\cf22 " realizada com sucesso"} << std::endl;\par
200 \}\par
201 \par
202 {\cf18 void} productRegister({\cf17 const} std::string& nomeArquivo) \{\par
203     {\cf19 while} ({\cf17 true}) \{\{\par
204         std::cout << MARKER << std::endl;\par
205         std::cout << {\cf22 "Selecione uma opcao:"} << std::endl;\par
206         std::cout << {\cf22 "1. Cadastrar produto"} << std::endl;\par
207         std::cout << {\cf22 "2. Verificar produto em estoque"} << std::endl;\par
208         std::cout << {\cf22 "3. Mostrar estoque"} << std::endl;\par
209         std::cout << {\cf22 "4. Remover produto"} << std::endl;\par
210         std::cout << {\cf22 "5. Vender produto"} << std::endl;\par
211         std::cout << {\cf22 "6. Voltar para pagina inicial"} << std::endl;\par
212         std::cout << MARKER << std::endl;\par
213 \par
214         {\cf18 int} opcao;\par
215         std::cin >> opcao;\par
216 \par
217         {\cf19 if} (opcao == 1) \{\par
218             cadastrarProduto(nomeArquivo);\par
219         \} {\cf19 else} {\cf19 if} (opcao == 2) \{\par
220         std::cout << {\cf22 "Digite o codigo do produto a ser verificado: "};\par
221         std::string nome;\par
222         std::cin >> nome;\par
223 \par
224         Verificador verificador(nomeArquivo);\par
225         std::string linha = verificador.linhaEncontrada(nome);\par
226 \par
227         {\cf19 if} (linha != {\cf22 "Palavra n\'E3o encontrada."}) \{\par
228                 std::cout << {\cf22 "Produto encontrado!"} \par
229                         << std::endl;\par
230                 std::cout << {\cf22 "--------------------------------"} \par
231                         << std::endl;\par
232                 std::cout << {\cf22 "Codigo"} << {\cf22 "  "} << {\cf22 "Nome"} << {\cf22 "  "} \par
233                         << {\cf22 "Categoria"} << {\cf22 "  "} << {\cf22 "Preco"} \par
234                                                 << std::endl;\par
235                 std::cout << linha \par
236                         << std::endl;\par
237                 std::cout << {\cf22 "--------------------------------"} \par
238                         << std::endl;\par
239                 std::string proxLinha = verificador.proxLinha(nome);\par
240                 std::cout << {\cf22 "--------------------------------"} \par
241                         << std::endl;\par
242 \par
243                 {\cf19 if} (proxLinha != {\cf22 "Linha nao encontrada."}) \{\par
244                         std::cout << {\cf22 "Estoque: "} << proxLinha << std::endl;\par
245                 \} {\cf19 else} \{\par
246                         std::cout << {\cf22 "Nao ha registro de estoque do produto informado."} << std::endl;\par
247                 \}\par
248         \}\par
249             \par
250         \} {\cf19 else} {\cf19 if} (opcao == 3) \{\par
251             std::string linha;\par
252             std::ifstream arquivo(nomeArquivo);\par
253                 {\cf19 while}(std::getline(arquivo, linha))\{\par
254             std::cout << linha << std::endl;\par
255         \}     \par
256         \} {\cf19 else} {\cf19 if} (opcao == 4) \{\par
257             std::cout << {\cf22 "Digite o nome do produto a ser removido: "};\par
258             std::string nomeProduto;\par
259             std::cin.ignore();\par
260             std::getline(std::cin, nomeProduto);\par
261             removerProduto(nomeArquivo, nomeProduto);\par
262         \} {\cf19 else} {\cf19 if} (opcao == 5) \{\par
263             std::cout << {\cf22 "Digite a o produto a ser vendido: "};\par
264             std::string nomeProduto;\par
265             std::cin.ignore();\par
266             std::getline(std::cin, nomeProduto);\par
267             std::cout << std::endl;\par
268             std::cout << {\cf22 "Digite a quantidade a ser vendida: "};\par
269             {\cf18 int} quantidade;\par
270             std::cin >> quantidade;\par
271             std::cout << std::endl;\par
272             venda(nomeProduto, nomeArquivo, quantidade);\par
273     \par
274         \}{\cf19 else} {\cf19 if} (opcao == 6) \{\par
275             {\cf19 break};\par
276         \} {\cf19 else} \{\par
277             std::cout << {\cf22 "Opcao invalida. Tente novamente."} << std::endl;\par
278         \}\par
279     \}\par
280 \}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/produto.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/produto.hpp}
{\xe \v ArquivosDeCodigo/produto.hpp}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <fstream>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <sstream>}\par
{\f2 #include "verificador.hpp"}\par
{\f2 #include "produto.cpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Produto}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MARKER}\~ "------------------------"\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b cadastrarProduto} (const std::string &nomeArquivo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b productRegister} (const std::string &nomeArquivo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removerProduto} (const std::string &nomeArquivo, const std::string &nomeProduto)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b venda} (const std::string &palavraDesejada, const std::string &nomeArquivo, int numeroSubtrair)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v MARKER\:produto.hpp}
{\xe \v produto.hpp\:MARKER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MARKER\~ "------------------------"}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v cadastrarProduto\:produto.hpp}
{\xe \v produto.hpp\:cadastrarProduto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void cadastrarProduto (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 34                                                     \{\par
35     std::fstream arquivo(nomeArquivo, std::ios::app);\par
36 \par
37     arquivo << {\cf22 "Codigo"} << {\cf22 "  "} << {\cf22 "Nome"} << {\cf22 "  "} << {\cf22 "Categoria"} << {\cf22 "  "} << {\cf22 "Preco"} << {\cf22 "  "} << {\cf22 "Unidade"}\par
38         << {\cf22 "  "} << {\cf22 "Quantidade"}\par
39         << std::endl;\par
40     arquivo << {\cf22 "----------------------------------"} << std::endl;\par
41 \par
42     {\cf19 if} (!arquivo.is_open()) \{\par
43         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
44         {\cf19 return};\par
45     \}\par
46 \par
47     std::vector<Produto> produtos;\par
48     {\cf18 char} continuar;\par
49 \par
50     {\cf19 do} \{\par
51         std::string nome, codigo, categoria, unidade;\par
52         {\cf18 double} preco;\par
53         {\cf18 int} quantidade;\par
54 \par
55         std::cout << {\cf22 "Codigo do produto: "};\par
56         std::cin >> codigo;\par
57         std::cin.ignore();\par
58 \par
59         std::cout << {\cf22 "Nome do produto: "};\par
60         std::getline(std::cin, nome);\par
61 \par
62         std::cout << {\cf22 "Categoria do produto: "};\par
63         std::getline(std::cin, categoria);\par
64 \par
65         std::cout << {\cf22 "Preco do produto: "};\par
66         std::cin >> preco;\par
67 \par
68         std::cout << {\cf22 "Unidade (cx ou un): "};\par
69         std::cin.ignore();\par
70         std::getline(std::cin, unidade);\par
71 \par
72         std::cout << {\cf22 "Quantidade: "};\par
73         std::cin >> quantidade;\par
74 \par
75         Verificador verificador(nomeArquivo);\par
76         {\cf19 while} (verificador.verificar(nome) || verificador.verificar(codigo)) \{\par
77             {\cf19 if} (verificador.verificar(codigo)) \{\par
78                 std::cout << {\cf22 "Codigo ja cadastrado, escreva um novo codigo: "};\par
79                 std::cin >> codigo;\par
80             \} {\cf19 else} {\cf19 if} (verificador.verificar(nome)) \{\par
81                 std::cout << {\cf22 "Nome ja cadastrado, escreva um novo nome."};\par
82                 std::cin >> nome;\par
83             \}\par
84         \}\par
85 \par
86         produtos.emplace_back(nome, codigo, categoria, preco, unidade, quantidade);\par
87 \par
88         std::cout << {\cf22 "Deseja cadastrar outro produto? (S/N): "} << std::endl;\par
89         std::cin >> continuar;\par
90 \par
91     \} {\cf19 while} (continuar == {\cf23 'S'} || continuar == {\cf23 's'});\par
92 \par
93     {\cf19 for} ({\cf17 const} Produto& produto : produtos) \{\par
94         arquivo << produto.getCodigo() << {\cf22 "   |"} << produto.getNome() << {\cf22 "   |"} << produto.getCategoria()\par
95             << {\cf22 "   |"} << {\cf22 "R$"} << produto.getPreco() << {\cf22 "   |"} << produto.getUnidade() << {\cf22 "   |"} << produto.getQuantidade()\par
96             << std::endl;\par
97         arquivo << {\cf22 "----------------------------------"} << std::endl;\par
98     \}\par
99 \par
100     arquivo.close();\par
101 \par
102     std::cout << {\cf22 "Cadastro de produtos conclu\'EDdo."} << std::endl;\par
103 \}\par
}
}
{\xe \v productRegister\:produto.hpp}
{\xe \v produto.hpp\:productRegister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void productRegister (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 202                                                    \{\par
203     {\cf19 while} ({\cf17 true}) \{\{\par
204         std::cout << MARKER << std::endl;\par
205         std::cout << {\cf22 "Selecione uma opcao:"} << std::endl;\par
206         std::cout << {\cf22 "1. Cadastrar produto"} << std::endl;\par
207         std::cout << {\cf22 "2. Verificar produto em estoque"} << std::endl;\par
208         std::cout << {\cf22 "3. Mostrar estoque"} << std::endl;\par
209         std::cout << {\cf22 "4. Remover produto"} << std::endl;\par
210         std::cout << {\cf22 "5. Vender produto"} << std::endl;\par
211         std::cout << {\cf22 "6. Voltar para pagina inicial"} << std::endl;\par
212         std::cout << MARKER << std::endl;\par
213 \par
214         {\cf18 int} opcao;\par
215         std::cin >> opcao;\par
216 \par
217         {\cf19 if} (opcao == 1) \{\par
218             cadastrarProduto(nomeArquivo);\par
219         \} {\cf19 else} {\cf19 if} (opcao == 2) \{\par
220         std::cout << {\cf22 "Digite o codigo do produto a ser verificado: "};\par
221         std::string nome;\par
222         std::cin >> nome;\par
223 \par
224         Verificador verificador(nomeArquivo);\par
225         std::string linha = verificador.linhaEncontrada(nome);\par
226 \par
227         {\cf19 if} (linha != {\cf22 "Palavra n\'E3o encontrada."}) \{\par
228                 std::cout << {\cf22 "Produto encontrado!"} \par
229                         << std::endl;\par
230                 std::cout << {\cf22 "--------------------------------"} \par
231                         << std::endl;\par
232                 std::cout << {\cf22 "Codigo"} << {\cf22 "  "} << {\cf22 "Nome"} << {\cf22 "  "} \par
233                         << {\cf22 "Categoria"} << {\cf22 "  "} << {\cf22 "Preco"} \par
234                                                 << std::endl;\par
235                 std::cout << linha \par
236                         << std::endl;\par
237                 std::cout << {\cf22 "--------------------------------"} \par
238                         << std::endl;\par
239                 std::string proxLinha = verificador.proxLinha(nome);\par
240                 std::cout << {\cf22 "--------------------------------"} \par
241                         << std::endl;\par
242 \par
243                 {\cf19 if} (proxLinha != {\cf22 "Linha nao encontrada."}) \{\par
244                         std::cout << {\cf22 "Estoque: "} << proxLinha << std::endl;\par
245                 \} {\cf19 else} \{\par
246                         std::cout << {\cf22 "Nao ha registro de estoque do produto informado."} << std::endl;\par
247                 \}\par
248         \}\par
249             \par
250         \} {\cf19 else} {\cf19 if} (opcao == 3) \{\par
251             std::string linha;\par
252             std::ifstream arquivo(nomeArquivo);\par
253                 {\cf19 while}(std::getline(arquivo, linha))\{\par
254             std::cout << linha << std::endl;\par
255         \}     \par
256         \} {\cf19 else} {\cf19 if} (opcao == 4) \{\par
257             std::cout << {\cf22 "Digite o nome do produto a ser removido: "};\par
258             std::string nomeProduto;\par
259             std::cin.ignore();\par
260             std::getline(std::cin, nomeProduto);\par
261             removerProduto(nomeArquivo, nomeProduto);\par
262         \} {\cf19 else} {\cf19 if} (opcao == 5) \{\par
263             std::cout << {\cf22 "Digite a o produto a ser vendido: "};\par
264             std::string nomeProduto;\par
265             std::cin.ignore();\par
266             std::getline(std::cin, nomeProduto);\par
267             std::cout << std::endl;\par
268             std::cout << {\cf22 "Digite a quantidade a ser vendida: "};\par
269             {\cf18 int} quantidade;\par
270             std::cin >> quantidade;\par
271             std::cout << std::endl;\par
272             venda(nomeProduto, nomeArquivo, quantidade);\par
273     \par
274         \}{\cf19 else} {\cf19 if} (opcao == 6) \{\par
275             {\cf19 break};\par
276         \} {\cf19 else} \{\par
277             std::cout << {\cf22 "Opcao invalida. Tente novamente."} << std::endl;\par
278         \}\par
279     \}\par
280 \}\}\par
}
}
{\xe \v removerProduto\:produto.hpp}
{\xe \v produto.hpp\:removerProduto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void removerProduto (const std::string &  {\i nomeArquivo}, const std::string &  {\i nomeProduto})}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 105                                                                                 \{\par
106     std::ifstream arquivo(nomeArquivo);\par
107     {\cf19 if} (!arquivo.is_open()) \{\par
108         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
109         {\cf19 return};\par
110     \}\par
111 \par
112     std::vector<std::string> linhas;\par
113     std::string linha;\par
114 \par
115     {\cf19 while} (std::getline(arquivo, linha)) \{\par
116         {\cf19 if} (linha.find(nomeProduto) == std::string::npos) \{\par
117             linhas.push_back(linha);\par
118         \}\par
119     \}\par
120 \par
121     arquivo.close();\par
122 \par
123     std::ofstream arquivoAtualizado(nomeArquivo);\par
124     {\cf19 if} (!arquivoAtualizado.is_open()) \{\par
125         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
126         {\cf19 return};\par
127     \}\par
128 \par
129     {\cf19 for} ({\cf17 const} std::string& linhaAtualizada : linhas) \{\par
130         arquivoAtualizado << linhaAtualizada << std::endl;\par
131     \}\par
132 \par
133     arquivoAtualizado.close();\par
134 \par
135     std::cout << {\cf22 "Produto removido com sucesso."} << std::endl;\par
136 \}\par
}
}
{\xe \v venda\:produto.hpp}
{\xe \v produto.hpp\:venda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void venda (const std::string &  {\i palavraDesejada}, const std::string &  {\i nomeArquivo}, int  {\i numeroSubtrair})}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 138                                                                                                \{\par
139     std::ifstream arquivoIn(nomeArquivo); {\cf20 // Abrir o arquivo de entrada}\par
140     \par
141     {\cf19 if} (!arquivoIn.is_open()) \{\par
142         std::cout << {\cf22 "Erro ao abrir o arquivo de entrada."} << std::endl;\par
143         {\cf19 return};\par
144     \}\par
145     \par
146     std::ofstream arquivoOut({\cf22 "temp.txt"}); {\cf20 // Abrir um arquivo tempor\'E1rio para escrever}\par
147     \par
148     {\cf19 if} (!arquivoOut.is_open()) \{\par
149         std::cout << {\cf22 "Erro ao abrir o arquivo tempor\'E1rio."} << std::endl;\par
150         {\cf19 return};\par
151     \}\par
152     \par
153     std::string linha;\par
154     \par
155     {\cf19 while} (std::getline(arquivoIn, linha)) \{\par
156         std::istringstream iss(linha);\par
157         std::string palavra;\par
158         {\cf18 int} ultimoNumero = 0;\par
159         \par
160         {\cf20 // Procura pela palavra desejada na linha}\par
161         {\cf18 size_t} pos = linha.find(palavraDesejada);\par
162         \par
163         {\cf19 if} (pos != std::string::npos) \{\par
164             {\cf20 // L\'EA o \'FAltimo n\'FAmero da linha}\par
165             {\cf19 while} (iss >> palavra) \{\par
166                 std::istringstream issNumero(palavra);\par
167                 {\cf18 int} numero;\par
168                 \par
169                 {\cf19 if} (issNumero >> numero) \{\par
170                     ultimoNumero = numero;\par
171                     std::cout << numero << std::endl;\par
172                 \}\par
173             \}\par
174             \par
175             {\cf19 if} (ultimoNumero >= numeroSubtrair)\{\par
176             {\cf20 // Subtrai o n\'FAmero fornecido do \'FAltimo n\'FAmero}\par
177             ultimoNumero -= numeroSubtrair;\par
178             \par
179             {\cf20 // Substitui o \'FAltimo n\'FAmero na linha}\par
180             std::string novoUltimoNumero = std::to_string(ultimoNumero);\par
181             linha.replace(pos, palavraDesejada.length(), novoUltimoNumero);\par
182             \}{\cf19 else} \{\par
183                 std::cout << {\cf22 "Quantidade em estoque insuficiente."} << std::endl;\par
184                 {\cf19 return};\par
185             \}\par
186         \}\par
187         \par
188         {\cf20 // Escreve a linha no arquivo tempor\'E1rio}\par
189         arquivoOut << linha << std::endl;\par
190     \}\par
191     \par
192     arquivoIn.close(); {\cf20 // Fechar o arquivo de entrada}\par
193     arquivoOut.close(); {\cf20 // Fechar o arquivo temporari}\par
194     \par
195     {\cf20 // Substitui o arquivo original pelo arquivo temporario}\par
196     std::remove(nomeArquivo.c_str());\par
197     std::rename({\cf22 "temp.txt"}, nomeArquivo.c_str());\par
198     \par
199     std::cout << {\cf22 "Venda de "} << numeroSubtrair << {\cf22 " "} << palavraDesejada << {\cf22 " realizada com sucesso"} << std::endl;\par
200 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
produto.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/produto.hpp}
{\xe \v ArquivosDeCodigo/produto.hpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef PRODUTO_HPP}\par
2 {\cf21 #define PRODUTO_HPP}\par
3 \par
4 {\cf21 #include <string>}\par
5 {\cf21 #include <fstream>}\par
6 {\cf21 #include <iostream>}\par
7 {\cf21 #include <vector>}\par
8 {\cf21 #include <sstream>}\par
9 \par
10 {\cf21 #define MARKER "------------------------"}\par
11 \par
12 {\cf21 #include "verificador.hpp"}\par
13 \par
14 {\cf17 class }Produto \{\par
15 {\cf17 private}:\par
16     std::string _nome;\par
17     std::string _codigo;\par
18     std::string _categoria;\par
19     {\cf18 double} _preco;\par
20     std::string _unidade;\par
21     {\cf18 int} _quantidade;\par
22 \par
23 {\cf17 public}:\par
24     Produto({\cf17 const} std::string& nome, {\cf17 const} std::string& codigo, {\cf17 const} std::string& categoria,\par
25             {\cf18 double} preco, {\cf17 const} std::string& unidade, {\cf18 int} quantidade);\par
26 \par
27     std::string getNome() {\cf17 const};\par
28     std::string getCodigo() {\cf17 const};\par
29     std::string getCategoria() {\cf17 const};\par
30     {\cf18 double} getPreco() {\cf17 const};\par
31     std::string getUnidade() {\cf17 const};\par
32     {\cf18 int} getQuantidade() {\cf17 const};\par
33 \};\par
34 \par
35 {\cf18 void} cadastrarProduto({\cf17 const} std::string& nomeArquivo);\par
36 {\cf18 void} productRegister({\cf17 const} std::string& nomeArquivo);\par
37 {\cf18 void} removerProduto({\cf17 const} std::string& nomeArquivo, {\cf17 const} std::string& nomeProduto);\par
38 {\cf18 void} venda({\cf17 const} std::string& palavraDesejada, {\cf17 const} std::string& nomeArquivo, {\cf18 int} numeroSubtrair);\par
39 \par
40 \par
41 {\cf21 #include "produto.cpp"}\par
42 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/removerProduto.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/removerProduto.cpp}
{\xe \v ArquivosDeCodigo/removerProduto.cpp}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "removerProduto.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b removeProduct} (std::vector< {\b Product} > &stock)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v removeProduct\:removerProduto.cpp}
{\xe \v removerProduto.cpp\:removeProduct}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool removeProduct (std::vector< {\b Product} > &  {\i stock})}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3                                             \{\par
4   std::string productName;\par
5   std::cout << {\cf22 "Digite o nome do produto:"} << std::endl;\par
6   std::cin >> productName;\par
7   std::cout << std::endl;\par
8   {\cf19 for} ({\cf17 auto}&product : stock)\{\par
9     {\cf19 if} (productName == product.name)\{\par
10       {\cf19 for} ({\cf17 auto} i = stock.begin(); i != stock.end(); ++i) \{ \par
11         {\cf19 if} (i->name == productName) \{\par
12             stock.erase(i);\par
13             {\cf19 break};\par
14         \}\par
15       \}\par
16       std::cout << {\cf22 "Produto apagado com sucesso!"} << std::endl;\par
17       std::cout << std::endl;\par
18       {\cf19 return} {\cf17 true};\par
19     \} {\cf19 else} \{\par
20       std::cout << {\cf22 "Nome de produto inv\'E1lido."} << std::endl;\par
21       std::cout << std::endl;\par
22       {\cf19 return} {\cf17 false};\par
23     \}\par
24   \}\par
25   \par
26   {\cf19 return} {\cf17 false};\par
27 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/removerProduto.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/removerProduto.hpp}
{\xe \v ArquivosDeCodigo/removerProduto.hpp}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <algorithm>}\par
{\f2 #include "vendas.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b removeProduct} (std::vector< {\b Product} > &stock)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v removeProduct\:removerProduto.hpp}
{\xe \v removerProduto.hpp\:removeProduct}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool removeProduct (std::vector< {\b Product} > &  {\i stock})}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3                                             \{\par
4   std::string productName;\par
5   std::cout << {\cf22 "Digite o nome do produto:"} << std::endl;\par
6   std::cin >> productName;\par
7   std::cout << std::endl;\par
8   {\cf19 for} ({\cf17 auto}&product : stock)\{\par
9     {\cf19 if} (productName == product.name)\{\par
10       {\cf19 for} ({\cf17 auto} i = stock.begin(); i != stock.end(); ++i) \{ \par
11         {\cf19 if} (i->name == productName) \{\par
12             stock.erase(i);\par
13             {\cf19 break};\par
14         \}\par
15       \}\par
16       std::cout << {\cf22 "Produto apagado com sucesso!"} << std::endl;\par
17       std::cout << std::endl;\par
18       {\cf19 return} {\cf17 true};\par
19     \} {\cf19 else} \{\par
20       std::cout << {\cf22 "Nome de produto inv\'E1lido."} << std::endl;\par
21       std::cout << std::endl;\par
22       {\cf19 return} {\cf17 false};\par
23     \}\par
24   \}\par
25   \par
26   {\cf19 return} {\cf17 false};\par
27 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
removerProduto.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/removerProduto.hpp}
{\xe \v ArquivosDeCodigo/removerProduto.hpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include<iostream>}\par
2 {\cf21 #include<vector>}\par
3 {\cf21 #include<algorithm>}\par
4 {\cf21 #include "vendas.hpp"}\par
5 \par
6 {\cf21 #ifndef REMVERPRODUTO_HPP}\par
7 {\cf21 #define REMVERPRODUTO_HPP}\par
8 \par
9 {\cf18 bool} removeProduct(std::vector<Product>&stock);\par
10 \par
11 \par
12 \par
13 \par
14 \par
15 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/vendas.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/vendas.cpp}
{\xe \v ArquivosDeCodigo/vendas.cpp}
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "vendas.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b sellProduct} (std::vector< {\b Product} > &stock)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v sellProduct\:vendas.cpp}
{\xe \v vendas.cpp\:sellProduct}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool sellProduct (std::vector< {\b Product} > &  {\i stock})}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3                                           \{\par
4   {\cf18 int} quantity;\par
5   std::string productName;\par
6   std::cout << {\cf22 "Digite o nome do produto:"} << std::endl;\par
7   std::cin >> productName;\par
8   std::cout << {\cf22 "Digite a quantidade:"} << std::endl;\par
9   std::cin >> quantity;\par
10 \par
11   \par
12   {\cf19 if} (quantity <= 0)\{\par
13     std::cout << {\cf22 "Quantidade inv\'E1lida"} << std::endl;\par
14     std::cout << std::endl;\par
15     {\cf19 return} {\cf17 false};\par
16   \}\par
17   \par
18   {\cf19 for} ({\cf17 auto}&product : stock)\{\par
19     {\cf19 if} (productName == product.name)\{\par
20       {\cf19 if} (product.quantity >= quantity)\{\par
21         product.quantity -= quantity;\par
22         std::cout << {\cf22 "Venda de "} << quantity << {\cf22 " "} << product.name << {\cf22 " realizada com sucesso!"} << std::endl \par
23         << {\cf22 "Valor da venda: R$"} << product.price * quantity << std::endl;\par
24         std::cout << std::endl;\par
25         {\cf19 return} {\cf17 true};\par
26       \} {\cf19 else} \{\par
27       std::cout << {\cf22 "Estoque insuficiente. Quantidade dispon\'EDvel:"} << product.quantity << std::endl;\par
28         std::cout << std::endl;\par
29         {\cf19 return} {\cf17 false};\par
30       \}\par
31     \}\par
32   \}\par
33   std::cout<< {\cf22 "Produto n\'E3o encontrado."} << std::endl;\par
34   std::cout << std::endl;\par
35   {\cf19 return} {\cf17 false};\par
36 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/vendas.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/vendas.hpp}
{\xe \v ArquivosDeCodigo/vendas.hpp}
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Product}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b sellProduct} (std::vector< {\b Product} > &stock)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v sellProduct\:vendas.hpp}
{\xe \v vendas.hpp\:sellProduct}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool sellProduct (std::vector< {\b Product} > &  {\i stock})}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3                                           \{\par
4   {\cf18 int} quantity;\par
5   std::string productName;\par
6   std::cout << {\cf22 "Digite o nome do produto:"} << std::endl;\par
7   std::cin >> productName;\par
8   std::cout << {\cf22 "Digite a quantidade:"} << std::endl;\par
9   std::cin >> quantity;\par
10 \par
11   \par
12   {\cf19 if} (quantity <= 0)\{\par
13     std::cout << {\cf22 "Quantidade inv\'E1lida"} << std::endl;\par
14     std::cout << std::endl;\par
15     {\cf19 return} {\cf17 false};\par
16   \}\par
17   \par
18   {\cf19 for} ({\cf17 auto}&product : stock)\{\par
19     {\cf19 if} (productName == product.name)\{\par
20       {\cf19 if} (product.quantity >= quantity)\{\par
21         product.quantity -= quantity;\par
22         std::cout << {\cf22 "Venda de "} << quantity << {\cf22 " "} << product.name << {\cf22 " realizada com sucesso!"} << std::endl \par
23         << {\cf22 "Valor da venda: R$"} << product.price * quantity << std::endl;\par
24         std::cout << std::endl;\par
25         {\cf19 return} {\cf17 true};\par
26       \} {\cf19 else} \{\par
27       std::cout << {\cf22 "Estoque insuficiente. Quantidade dispon\'EDvel:"} << product.quantity << std::endl;\par
28         std::cout << std::endl;\par
29         {\cf19 return} {\cf17 false};\par
30       \}\par
31     \}\par
32   \}\par
33   std::cout<< {\cf22 "Produto n\'E3o encontrado."} << std::endl;\par
34   std::cout << std::endl;\par
35   {\cf19 return} {\cf17 false};\par
36 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
vendas.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/vendas.hpp}
{\xe \v ArquivosDeCodigo/vendas.hpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include<iostream>}\par
2 {\cf21 #include<vector>}\par
3 \par
4 {\cf21 #ifndef VENDAS_HPP}\par
5 {\cf21 #define VENDAS_HPP}\par
6 \par
7 {\cf17 struct }Product \{\par
8   std::string name;\par
9   std::string category;\par
10   {\cf18 int} quantity;\par
11   {\cf18 int} code;\par
12   {\cf18 float} price;\par
13 \};\par
14 \par
15 {\cf18 bool} sellProduct(std::vector<Product>&stock);\par
16 \par
17 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/Verificador.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/Verificador.cpp}
{\xe \v ArquivosDeCodigo/Verificador.cpp}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Verificador.cpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/Verificador.cpp}
{\xe \v ArquivosDeCodigo/Verificador.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Construtor da classe Verificador}\par
2 Verificador::Verificador({\cf17 const} std::string& arquivo) : _nomeArquivo(arquivo) \{\par
3   abrirArquivo();\par
4   {\cf20 // Abre o arquivo para leitura}\par
5 \}\par
6 \par
7 {\cf20 // Destrutor da classe Verificador}\par
8 Verificador::~Verificador() \{\par
9   fecharArquivo();\par
10   {\cf20 // Fecha o arquivo}\par
11 \}\par
12 \par
13 {\cf20 // Verifica se uma palavra existe no arquivo}\par
14 {\cf18 bool} Verificador::verificar({\cf17 const} std::string& palavra)\{\par
15   std::string linha; \par
16   {\cf18 bool} encontrada = {\cf17 false};\par
17 \par
18   {\cf19 while}(std::getline(_arquivo, linha))\{\par
19     {\cf20 // L\'EA cada linha do arquivo}\par
20     {\cf18 size_t} pos = linha.find(palavra);\par
21     {\cf20 // Procura a posi\'E7\'E3o da palavra na linha}\par
22     {\cf19 if} (pos != std::string::npos) \{\par
23       {\cf20 // Se encontrou a palavra, marca como encontrada e interrompe o loop}\par
24       encontrada = {\cf17 true};\par
25       {\cf19 break};\par
26     \}\par
27   \}\par
28 \par
29   _arquivo.clear();\par
30   _arquivo.seekg(0);\par
31   {\cf20 // Retorna ao in\'EDcio do arquivo}\par
32 \par
33   {\cf19 return} encontrada;\par
34   {\cf20 // Retorna se a palavra foi encontrada ou n\'E3o}\par
35 \}\par
36 \par
37 {\cf20 // Retorna a linha onde a palavra foi encontrada}\par
38 std::string Verificador::linhaEncontrada({\cf17 const} std::string& palavra) \{\par
39   std::string linha; \par
40   {\cf18 bool} encontrada = {\cf17 false};\par
41 \par
42   {\cf19 while}(std::getline(_arquivo, linha))\{\par
43     {\cf20 // L\'EA cada linha do arquivo}\par
44     {\cf18 size_t} pos = linha.find(palavra);\par
45     {\cf20 // Procura a posi\'E7\'E3o da palavra na linha}\par
46     {\cf19 if} (pos != std::string::npos) \{\par
47       {\cf20 // Se encontrou a palavra, marca como encontrada e interrompe o loop}\par
48       encontrada = {\cf17 true};\par
49       {\cf19 break};\par
50     \}\par
51   \}\par
52   \par
53   _arquivo.clear();\par
54   _arquivo.seekg(0);\par
55   {\cf20 // Retorna ao in\'EDcio do arquivo}\par
56 \par
57   {\cf19 if} (encontrada) \{\par
58     {\cf20 // Se a palavra foi encontrada, retorna a linha}\par
59     {\cf19 return} linha;\par
60   \} {\cf19 else} \{\par
61     {\cf20 // Se a palavra n\'E3o foi encontrada, retorna uma mensagem de erro}\par
62     {\cf19 return} {\cf22 "Palavra nao encontrada."};\par
63   \}\par
64 \}\par
65 \par
66 {\cf20 // Retorna a pr\'F3xima linha ap\'F3s a linha onde a palavra foi encontrada}\par
67 std::string Verificador::proxLinha({\cf17 const} std::string& palavra) \{\par
68   std::string linha;\par
69   {\cf18 bool} encontrada = {\cf17 false};\par
70   {\cf18 bool} proxLinha = {\cf17 false};\par
71 \par
72   {\cf19 while}(std::getline(_arquivo, linha))\{\par
73     {\cf20 // L\'EA cada linha do arquivo}\par
74     {\cf18 size_t} pos = linha.find(palavra);\par
75     {\cf20 // Procura a posi\'E7\'E3o da palavra na linha}\par
76     {\cf19 if} (pos != std::string::npos) \{\par
77       {\cf20 // Se encontrou a palavra, marca como encontrada e marca para pegar a pr\'F3xima linha}\par
78       encontrada = {\cf17 true};\par
79       proxLinha = {\cf17 true};\par
80       {\cf19 break};\par
81     \}\par
82   \}\par
83   \par
84   {\cf19 while}(std::getline(_arquivo, linha))\{\par
85     {\cf20 // L\'EA cada linha do arquivo ap\'F3s a linha encontrada}\par
86     {\cf19 if}(encontrada && proxLinha) \{\par
87       {\cf20 // Se j\'E1 encontrou a linha e est\'E1 na pr\'F3xima linha, interrompe o loop}\par
88       {\cf19 break};\par
89     \}\par
90   \}\par
91 \par
92   _arquivo.clear();\par
93   _arquivo.seekg(0);\par
94   {\cf20 // Retorna ao in\'EDcio do arquivo}\par
95 \par
96   {\cf19 if}(encontrada && proxLinha) \{\par
97     {\cf20 // Se a linha foi encontrada e a pr\'F3xima linha foi encontrada, retorna a pr\'F3xima linha}\par
98     {\cf19 return} linha; \par
99   \} {\cf19 else} \{\par
100     {\cf20 // Se a linha n\'E3o foi encontrada ou a pr\'F3xima linha n\'E3o foi encontrada, retorna uma mensagem de erro}\par
101     {\cf19 return} {\cf22 "Linha nao encontrada."};\par
102   \}\par
103 \}\par
104 \par
105 {\cf20 // Abre o arquivo para leitura}\par
106 {\cf18 void} Verificador::abrirArquivo() \{\par
107   _arquivo.open(_nomeArquivo);\par
108   {\cf19 if}(!_arquivo.is_open()) \{\par
109     {\cf20 // Se n\'E3o foi poss\'EDvel abrir o arquivo, exibe uma mensagem de erro}\par
110     std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
111   \}\par
112 \}\par
113 \par
114 {\cf20 // Fecha o arquivo}\par
115 {\cf18 void} Verificador::fecharArquivo() \{\par
116   {\cf19 if}(_arquivo.is_open()) \{\par
117     {\cf20 // Se o arquivo estiver aberto, fecha o arquivo}\par
118     _arquivo.close();\par
119   \}\par
120 \}\par
121 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo ArquivosDeCodigo/Verificador.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/Verificador.hpp}
{\xe \v ArquivosDeCodigo/Verificador.hpp}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <fstream>}\par
{\f2 #include <iostream>}\par
{\f2 #include "verificador.cpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Verificador}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Verificador.hpp\par \pard\plain 
{\tc\tcl2 \v ArquivosDeCodigo/Verificador.hpp}
{\xe \v ArquivosDeCodigo/Verificador.hpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef VERIFICADOR_HPP}\par
2 {\cf21 #define VERIFICADOR_HPP}\par
3 \par
4 {\cf21 #include <string>}\par
5 {\cf21 #include <fstream>}\par
6 {\cf21 #include <iostream>}\par
7 \par
8 {\cf17 class }Verificador \{\par
9 {\cf17 private}: \par
10   std::ifstream _arquivo;\par
11   std::string _nomeArquivo;\par
12   {\cf18 void} abrirArquivo();\par
13   {\cf18 void} fecharArquivo();\par
14 \par
15 {\cf17 public}: \par
16   Verificador({\cf17 const} std::string& arquivo);\par
17   ~Verificador();\par
18 \par
19   {\cf18 bool} verificar({\cf17 const} std::string& palavra);\par
20   std::string linhaEncontrada({\cf17 const} std::string& palavra);\par
21   std::string proxLinha({\cf17 const} std::string& palavra);\par
22 \};\par
23 \par
24 \par
25 {\cf21 #include "verificador.cpp"}\par
26 \par
27 {\cf21 #endif}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par 
\pard\plain 
{\tc \v Sum\'E1rio}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
